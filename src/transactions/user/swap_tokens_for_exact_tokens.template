import TokenOutName from TokenOutAddr

import FungibleToken from "../../contracts/tokens/FungibleToken.cdc"
import SwapRouter from "../../contracts/SwapRouter.cdc"

transaction(
    tokenKeyPath: [String],
    amountInMax: UFix64,
    exactAmountOut: UFix64,
    deadline: UFix64,

    tokenInVaultPath: StoragePath,
    tokenOutVaultPath: StoragePath,
    tokenOutReceiverPath: PublicPath,
    tokenOutBalancePath: PublicPath,
) {
    prepare(userAccount: AuthAccount) {
        
        var len = tokenKeyPath.length
        let tokenInKey = tokenKeyPath[0]
        let tokenOutKey = tokenKeyPath[len-1]

        var tokenOutAmountTotal = 0.0

        var tokenOutReceiverRef = userAccount.borrow<&FungibleToken.Vault>(from: tokenOutVaultPath)
        if tokenOutReceiverRef == nil {
            userAccount.save(<- TokenOutName.createEmptyVault(), to: tokenOutVaultPath)
            userAccount.link<&TokenOutName.Vault{FungibleToken.Receiver}>(tokenOutReceiverPath, target: tokenOutVaultPath)
            userAccount.link<&TokenOutName.Vault{FungibleToken.Balance}>(tokenOutBalancePath, target: tokenOutVaultPath)

            tokenOutReceiverRef = userAccount.borrow<&FungibleToken.Vault>(from: tokenOutVaultPath)
        }
        let vaultInRef = userAccount.borrow<&FungibleToken.Vault>(from: tokenInVaultPath)
        let vaultInMax <- vaultInRef!.withdraw(amount: amountInMax)

        let swapResVault <- SwapRouter.swapTokensForExactTokens(
            vaultInMax: <-vaultInMax,
            exactAmountOut: exactAmountOut,
            tokenKeyPath: tokenKeyPath,
            deadline: deadline
        )
        let vaultOut <- swapResVault.removeFirst()
        let vaultInLeft <- swapResVault.removeLast()
        destroy swapResVault

        log("out ".concat(vaultOut.balance.toString()))
        log("left ".concat(vaultInLeft.balance.toString()))
        tokenOutReceiverRef!.deposit(from: <-vaultOut)
        vaultInRef!.deposit(from: <-vaultInLeft)
    }
}