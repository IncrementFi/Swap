// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../src/transactions/.DS_Store (6.148kB)
// ../../../src/transactions/factory/create_pair.template (511B)
// ../../../src/transactions/factory/deploy_pair_template.cdc (574B)
// ../../../src/transactions/test/mint_all_tokens.cdc (8.827kB)
// ../../../src/transactions/user/add_liquidity.cdc (2.426kB)
// ../../../src/transactions/user/remove_liquidity.cdc (1.729kB)
// ../../../src/transactions/user/swap_exact_tokens_for_tokens.cdc (3.08kB)
// ../../../src/transactions/user/swap_exact_tokens_for_tokens.template (2.965kB)
// ../../../src/transactions/user/swap_tokens_for_exact_tokens.cdc (4.233kB)
// ../../../src/transactions/user/swap_with_one_pair.template (1.832kB)
// ../../../src/transactions/user/swap_with_one_path.template (1.854kB)
// ../../../src/transactions/user/swap_with_pair_path.template (1.854kB)

package assets_trans

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x31\x4e\xc3\x40\x10\x45\xff\x2e\x16\x31\x82\xc2\x25\x05\x85\x85\x38\x00\xe9\x52\x9a\xc8\x69\x68\x28\x72\x01\x48\x1c\xa0\x70\xe4\x28\x71\x0a\x44\xe3\x92\x0e\x3a\x6e\x00\xe2\x1c\xb4\x08\x24\x2a\x8e\x83\xec\xfd\xc0\x1a\x9b\x88\x06\x30\xd1\x3c\x29\x7a\x52\x66\x76\x66\x95\x8d\x92\x59\x03\x50\xdd\x79\xd4\x06\x3c\x00\x2e\x8c\xf5\x1a\x6a\x71\xf9\xaa\xa0\xe9\x8d\xbc\x5e\x51\x23\xc1\x14\x67\xf1\x49\xbb\x3f\x4c\xea\x6b\x09\x0d\x23\x3f\xbb\x16\x8e\x71\x84\x21\x52\xfb\xfc\xc6\x13\x93\xe0\x1c\x54\x33\xc6\x49\x18\x0e\xe2\x64\x90\x7f\x31\x56\x77\xee\x5a\x97\x0f\xf7\x7b\x75\x59\xd1\x37\xb2\x26\xa7\x76\x37\xbf\x68\x89\x14\x23\xcc\x90\x96\x77\xb2\x7d\x6e\xc7\xec\x3d\x5c\xf4\x3a\x2f\xf1\x53\x51\xdd\x8a\x47\x0b\xe3\xe5\xbe\xbb\xa6\xef\x1c\x33\x8c\x30\x2d\xf7\xdd\x7f\xb4\x63\x76\xdf\xad\xdb\xeb\x9b\xce\x33\xeb\xbe\xc7\xa3\x85\xf1\x72\xdf\xab\x5f\x3e\x6e\x41\x10\x84\x02\x65\xe4\xae\xff\xf5\x46\x04\x41\x68\x1c\x8a\x03\x59\xee\x80\xce\x8c\x15\xe3\x9a\x76\xac\x35\x1e\xed\xd3\x01\x9d\x19\x2b\xe6\x69\xda\xa1\x5d\xda\xa3\x7d\x3a\xa0\x33\x63\xfe\x68\x29\x5e\x3e\x14\x3b\x2b\xde\x50\x94\x47\xfb\x74\xf0\x33\x9f\x8d\x20\xfc\x77\x56\x8c\xbc\xfc\xff\xbf\xf7\xf5\xfd\x5f\x10\x84\x25\x46\x39\x61\x3f\xec\x7e\x5c\x08\x2a\x68\x0e\x02\x87\x6f\x0b\x3e\x0d\x02\xb0\x86\x00\x6d\x1e\x16\x6e\x5a\xef\xcb\x20\x20\x08\x0d\xe3\x35\x00\x00\xff\xff\x63\x73\x51\xb5\x04\x18\x00\x00"

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x23, 0x7a, 0xdc, 0xe, 0xc4, 0x11, 0xf6, 0x46, 0xfa, 0xd2, 0xc8, 0xbd, 0x41, 0x4f, 0xd5, 0x32, 0xc5, 0x49, 0xf4, 0xa1, 0xab, 0xc7, 0x2f, 0x1d, 0xda, 0xaf, 0xde, 0xa3, 0x6e, 0x9e, 0xba}}
	return a, nil
}

var _factoryCreate_pairTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x4b\xfc\x30\x10\xc5\xef\xf9\x2b\x86\x9e\x52\xf8\x6e\xfa\xed\x75\x59\x85\x45\xf4\x28\x82\xe2\x7d\x4c\x46\x2d\xb6\x99\x30\x9d\xb2\x14\xd9\xff\x5d\xb6\x3f\xd6\xac\x1e\x9c\x53\x5f\xe7\xf3\x92\xf7\x48\xd3\x25\x16\x85\x27\xfe\xa0\xf8\xff\x1e\x3b\x82\x57\xe1\x6e\xd1\xfb\x10\xc4\xe4\x44\xfd\x83\xa8\x27\x62\x45\x1e\x0f\x98\xee\xd0\x2b\xcb\x38\x33\x85\x73\x95\x73\x95\xe7\xa8\x82\x5e\xfb\x2a\x23\x9c\x0f\xbe\x30\xa6\xaa\x20\x50\x6a\x79\x04\xcf\x81\xc0\x73\x6a\x28\xc0\xcb\x08\xb8\xfc\xa7\x00\xab\xdf\xa8\x60\xec\xd1\x6b\xc3\xd1\x96\xf0\x69\x00\x00\x92\x50\x42\x21\x3b\xf4\x24\x7b\xef\x79\x88\xba\x85\xfd\xa0\xef\x8b\x58\xb9\xd3\xb4\xa4\xa0\x53\xb3\x67\x1c\x5a\x85\xdd\x26\x2b\xee\xbc\x10\x2a\xdd\x76\x49\xc7\x69\x6d\xcb\xdf\xc6\xfa\xd2\x58\xff\x65\x3c\x7f\x5c\x34\x9f\xf8\x07\x6c\xc4\x66\x69\xb6\xb0\xdb\x64\xf2\x5f\x7e\xe1\x79\x37\xcb\xd2\x7c\x27\xe3\x37\x5b\x5c\x9d\xe6\x1a\x6e\xa6\x73\x21\xd2\x01\x12\x36\x02\x36\x7b\xd5\x3c\x70\x59\xcc\x01\x8f\xe6\xf8\x15\x00\x00\xff\xff\x19\xc5\xc1\x30\xff\x01\x00\x00"

func factoryCreate_pairTemplateBytes() ([]byte, error) {
	return bindataRead(
		_factoryCreate_pairTemplate,
		"factory/create_pair.template",
	)
}

func factoryCreate_pairTemplate() (*asset, error) {
	bytes, err := factoryCreate_pairTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "factory/create_pair.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xb3, 0x93, 0x8d, 0x47, 0x84, 0x3c, 0x27, 0xb3, 0x90, 0xc8, 0x49, 0xff, 0xfa, 0x95, 0x88, 0x1e, 0x98, 0x4b, 0x83, 0xc7, 0x72, 0xab, 0x5e, 0x6b, 0x7a, 0x9c, 0x7, 0x30, 0x0, 0xc8, 0xf5}}
	return a, nil
}

var _factoryDeploy_pair_templateCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4d\x4f\xf3\x30\x0c\xc7\xef\xfd\x14\x56\x4f\x9d\xb4\x27\x7d\xb8\xa1\x08\x90\x36\x5e\x4e\x3b\x20\x6d\x70\x37\x89\x37\x22\xda\x38\x4a\x5d\xa1\x0a\xed\xbb\xa3\xbe\x8d\xf0\xea\x93\xe3\xf8\xe7\xfc\xff\x8e\xab\x03\x47\x81\xf5\x66\x07\xfb\xc8\x35\xe4\x4a\x95\x4a\x95\x86\xbd\x44\x34\xd2\x94\xc2\x2f\xe4\x9b\x72\xbd\xd9\x29\x63\x4d\x9e\x4d\xc0\xdd\xc3\xf6\xe6\x6f\xa2\xef\x18\x91\xac\x2c\xc1\x52\xa8\xb8\x03\xc3\x96\xc0\x70\x70\x64\xe1\xa9\x03\x9c\xea\x64\x61\xe6\x33\x89\xe8\x1b\x34\xe2\xd8\x17\x01\x5d\xdc\x51\x1d\x2a\x14\xba\x66\x4b\x1a\xb6\x12\x9d\x3f\x2c\xe0\x2d\x03\x00\x08\x91\x02\x46\x2a\xc6\x29\x2b\x63\xb8\xf5\xa2\x61\xd5\xca\xf3\x74\x98\x3b\xfb\xa8\x48\x60\x10\xf7\xff\x11\xdb\x4a\xe0\xe2\x1f\x0c\xb6\x22\xa1\xd0\x6d\x1d\xa4\x1b\xea\xc5\xe2\x3b\x71\x76\x22\x46\x5b\xbf\x23\x9f\xa4\xa8\xd3\x56\x14\x5a\x5b\x78\xac\x49\x43\xbe\x7d\xc5\x70\x8f\x2e\xe6\xcb\x61\x1f\x1a\xbe\xda\x54\xad\xec\xcf\x97\xa9\x56\x9d\xe4\xcb\x54\x92\x4e\xf2\x54\x44\x23\x91\xbb\x74\xc2\xcf\x77\x23\x98\x7d\x18\xe6\x43\x91\x5f\xf6\x71\x05\xbd\x44\x90\x49\xd6\xfc\x81\x4d\x6b\x4c\x3e\x3e\x74\xcc\x8e\xef\x01\x00\x00\xff\xff\xac\xaa\x94\xa1\x3e\x02\x00\x00"

func factoryDeploy_pair_templateCdcBytes() ([]byte, error) {
	return bindataRead(
		_factoryDeploy_pair_templateCdc,
		"factory/deploy_pair_template.cdc",
	)
}

func factoryDeploy_pair_templateCdc() (*asset, error) {
	bytes, err := factoryDeploy_pair_templateCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "factory/deploy_pair_template.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xca, 0x8d, 0x7f, 0x74, 0x8e, 0x17, 0x17, 0x7e, 0xfc, 0x88, 0xe2, 0x60, 0x51, 0x2f, 0xcc, 0x50, 0x3e, 0x5e, 0x49, 0x3b, 0xe5, 0x81, 0x1b, 0xcd, 0x94, 0xde, 0x6d, 0xb, 0x59, 0x7e, 0x49}}
	return a, nil
}

var _testMint_all_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x99\x4f\x6f\xa3\x3a\x14\xc5\xf7\xf9\x14\x7e\x59\x3c\x11\xa9\x25\x9b\xa7\xb7\xa8\xd2\x6a\xe2\xb4\xac\x58\x8c\x1a\x3a\xdb\x91\x21\x26\x45\x25\x38\x32\x97\x64\xaa\x2a\xdf\x7d\xc4\x9f\x00\x06\x43\x20\x35\x84\xcd\x64\xca\x3d\xe7\xd8\xbe\xfd\x95\xe4\xc6\xdb\xed\x19\x07\x64\x44\xc1\xd6\xb3\x7d\x6a\xb1\x0f\x1a\x20\x97\xb3\x1d\x9a\xea\xfa\x5c\xd7\xe7\x0e\x0b\x80\x13\x07\xc2\x39\xc4\xf7\xc2\xb9\x50\xaa\x3b\x1b\x67\x3a\x99\x64\x2e\xf8\x6d\xfd\xdc\x2e\x8e\x2b\x52\xcd\x39\xf8\xa2\xc4\xa8\x4a\xde\xd6\xcf\xab\x76\x49\x5c\x51\x95\x58\x17\x25\x96\x20\x39\x1a\x3e\x3b\xb6\x6b\x92\x12\x41\x84\xcd\x0b\x31\xd8\xb4\xc4\x23\xb3\x68\x08\xc9\x49\x2e\xdb\x85\x45\x9d\x10\x98\xff\x18\x77\x94\x63\xb9\xfc\xc2\x81\x16\x75\xd9\xea\x81\x93\x20\x24\x0e\x78\x2c\xd0\x76\x5e\x00\xcb\x1d\x8b\x02\x78\x40\x6f\x86\xf7\xe7\xff\xff\x66\xe8\x6b\x32\x41\x08\xa1\x3d\xa7\x7b\xc2\xa9\x16\x7a\xdb\x80\xf2\x07\xb4\x8c\xe0\x7d\xe9\x38\x71\x6d\x5c\x83\xb2\xcb\x67\x5b\x6d\x6a\x15\x96\x68\x0d\x84\x03\xba\x17\x2f\x14\x07\x21\xe2\xfb\x28\x5d\xd5\x74\x96\x1b\xe4\x2f\x0e\x84\xa3\x03\x89\x7c\x58\x03\xe3\x64\x4b\x7f\x12\x78\x47\x8f\x68\x1e\xa6\xff\x9d\xdb\x51\xb8\xf9\x15\xdf\xaf\x2b\x5e\xa9\x43\xbd\x03\xe5\x67\xc9\x3e\xb2\x7d\xcf\x49\x14\xe7\x5b\x75\x11\x26\x3e\x09\x1c\x2a\xd1\x64\x77\x04\x49\x9e\xfe\x4a\x5d\xf4\x88\xd2\x53\xd1\x6d\xc6\x39\x3b\x2e\xfe\x4d\xd8\x48\x6e\x3f\x69\x71\x37\x1e\x6a\x3b\x29\x36\xec\xb9\x15\xb3\x47\x14\x78\x7e\xe9\x48\xe3\x6b\x43\x43\xe0\xec\x13\x2d\xee\xcf\x51\x3e\x23\x9b\xc5\x8f\x65\xf0\xf9\x4a\x43\x16\x71\x87\x36\x27\x09\x4e\x99\x3c\x24\x07\xaa\x2d\xee\x53\x88\x39\x25\x40\x5f\x76\x7b\xf8\x4c\x56\xa1\xcd\xee\x10\xb0\xb6\x35\x97\x8c\x7c\x2f\xf8\x28\x6f\xf8\x4b\xfc\xa3\x72\x3e\xef\xd3\x93\x56\x6b\xcd\x1d\x02\xc2\xb7\x14\xd4\x24\x65\x5d\x3a\x07\x95\xda\xd9\x25\xe7\x94\xbf\x52\xd7\xd9\xb2\xd3\x3f\xfa\x86\xee\x59\xe8\x41\xa6\xca\x8e\x1e\x68\x08\xbf\x63\x18\x28\xd7\xe3\x7f\x92\xad\x84\x1a\xc9\x18\x2c\x78\x9c\xcd\x44\xc4\x12\x80\xa6\xba\xc3\x02\x87\x80\x26\x26\xd9\xe9\xd6\x75\x60\x6b\xe0\x5e\xb0\xd5\x66\x25\xf5\xbc\x7a\x95\x7e\xad\x9b\x61\x73\x25\xb0\x35\x83\xe6\xca\x41\x6b\x84\xcc\x6d\x80\xcc\x6d\x6d\x85\xd1\x0f\x32\xf7\x66\x90\x19\x8a\x20\x33\x46\x83\xac\x31\x49\x15\x64\xea\x3a\xeb\xb6\x42\x66\x28\x84\xcc\x1d\x1a\xb2\x28\xdc\x38\xdd\x21\x8b\xab\xfb\x40\x16\xd7\xcb\x20\xcb\x53\xa5\xad\x48\xde\x7f\x75\x87\x4c\x34\x1b\x13\xb2\xf4\x8d\xe2\xf7\x21\x2b\x36\x3c\x34\x64\x8d\x49\xaa\x20\x53\xd7\xd9\xb2\x53\x1d\xb2\xc4\x49\x11\x64\x62\xd2\x30\x90\x41\x2f\xc8\xa0\x27\x64\xd0\x00\x19\xb4\xb6\xc2\xea\x07\x19\xdc\x0c\x32\x4b\x11\x64\xd6\x68\x90\xc9\x93\x14\x42\xa6\xa8\xb3\x65\x27\x29\x64\x96\x42\xc8\x60\x50\xc8\x8e\xae\xcf\x8e\xdd\x29\x4b\xca\xfb\x60\x96\x08\x64\x9c\x15\xc1\xd2\x76\xa4\x1f\xf3\xbb\x93\x56\xb1\x1b\x13\xb5\x6c\x22\xf1\x7d\xd6\x4a\x7b\x1e\x1a\xb6\xe6\x28\x55\xb4\xa9\xec\xaf\xe0\x55\x07\x2e\xf5\x52\x44\x5c\x25\x6b\x00\xe4\x6c\xd3\xea\x0e\x9c\x6d\x5a\x7d\x70\xb3\x4d\x4b\x3a\x03\xc9\x22\xe5\x1f\x94\xcd\x3e\x8f\x34\xc1\x6a\xd4\x01\x88\xa9\xe4\x81\x96\xef\x76\xf0\xf1\x47\x43\x90\xb2\xe9\x87\xa2\x9e\x96\x7c\x24\xa3\x0f\x53\xd9\xa3\x4c\xc8\x19\x00\x2b\xc8\x87\xb5\xdd\xe9\x2a\x34\x7d\x20\x2b\x54\x32\xd6\x2a\xeb\x90\xb6\xa7\x34\x58\xee\x4e\x9e\xcc\x78\x4c\x00\xcb\xd3\xf0\xef\x73\x58\x3d\x82\xa1\x71\xbc\x90\xa7\x8a\xca\x61\xba\x5f\x77\xad\xa3\x5a\x72\x55\x44\xac\x2c\x75\x48\x70\xf1\x15\xe0\xe2\xab\xc0\xc5\xad\xe0\xe2\x0e\xad\xc3\xd7\x80\x8b\x6f\x0c\x2e\x56\x0a\x2e\x1e\x19\x5c\x79\x9e\x72\x70\x95\x76\xbf\xee\xda\x02\x2e\x56\x0e\x2e\x1e\x07\xdc\xd5\x15\xe0\xae\xae\x02\x77\xd5\x0a\xee\xaa\x43\xeb\xfa\xcc\x48\x65\xc6\x37\x01\x57\xc9\xbc\xb4\x7a\x04\xa3\x81\x3b\xec\xec\x74\x98\xee\xd7\x5d\x5b\xc0\x55\x36\x53\x95\xa5\xb6\x82\x9b\x78\xbc\x04\x9b\xea\xd7\xf6\xe2\x95\x7d\x69\x7f\x9a\x9c\x26\x7f\x03\x00\x00\xff\xff\x0d\x3a\x7b\xb6\x7b\x22\x00\x00"

func testMint_all_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_testMint_all_tokensCdc,
		"test/mint_all_tokens.cdc",
	)
}

func testMint_all_tokensCdc() (*asset, error) {
	bytes, err := testMint_all_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/mint_all_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x79, 0x54, 0x11, 0x6f, 0x1a, 0xf1, 0xc2, 0x14, 0x35, 0xf4, 0xd3, 0x64, 0x1, 0x99, 0x91, 0xf6, 0x3d, 0xf4, 0x77, 0xfa, 0x2c, 0x83, 0x61, 0x39, 0xf8, 0xa5, 0x65, 0xb7, 0x4e, 0xd4, 0x78}}
	return a, nil
}

var _userAdd_liquidityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6f\xfa\x46\x10\xbd\xf3\x29\x06\x0e\x91\x2d\x81\x1d\xa4\xaa\x07\x0b\x50\x49\xda\x48\x51\x2b\x05\x25\x69\xee\xcb\xee\x60\x56\x31\xbb\xee\x7a\x0c\xb5\x10\xdf\xbd\xf2\xff\xc5\x26\x14\x29\xbf\x1f\x27\xef\xec\x9b\x79\x33\x6f\x66\x16\xb9\x8b\xb5\x21\x78\x4a\x55\x28\xd7\x11\xbe\xeb\x4f\x54\xb0\x31\x7a\x07\x23\xcf\xf3\x3d\xcf\xe7\x5a\x91\x61\x9c\x12\x9f\xf2\xbb\xc4\x3f\x83\x7a\x5c\xf0\xd1\xa0\x0a\xf2\x76\x60\xf1\x13\xe3\xa4\x4d\xf6\x45\x08\x0b\xd1\xf3\x7c\x56\x84\x66\xc3\x38\x26\x57\x9c\x5b\x50\xcf\xff\x51\xab\x8d\x0c\xaf\xf8\x96\x80\x9e\xdf\x8a\x49\x73\xc5\x2b\xbf\x2e\x7d\x06\xbe\x0f\x02\xe3\x48\x67\xc0\xb5\x40\xe0\x3a\x96\x28\x60\x9d\x01\xab\xec\x28\xa0\x76\x1e\x90\x61\x2a\x61\x9c\xa4\x56\xce\x00\x00\xa0\x90\xef\xfe\x4f\xcc\x02\x78\x23\x23\x55\x38\x6e\xcd\xd3\xcb\xe6\xfb\x67\x15\xc0\xdf\x4f\xf2\xdf\x5f\x7f\xb1\xc1\x17\xad\xf7\x1f\x2c\x8d\x68\xc5\x68\x9b\x07\xd2\x86\x85\x98\x1f\x6c\xbf\xaf\x10\x2e\x1c\x0b\x54\x6c\x30\x66\x06\x9d\x34\x41\xb3\xe4\x5c\xa7\x8a\x02\x58\xa6\xb4\xad\x0e\x35\x2e\xff\xf9\x3e\xbc\xbf\xfc\xfe\x02\x4a\x46\xc0\xb7\xc8\x3f\x9b\x9b\x08\x09\x62\x26\xcd\x52\x08\x03\x73\x7b\x28\xbc\x10\x69\x55\xdd\x60\x92\x38\x96\x22\xcd\xe7\xd8\x16\xa4\xf9\x74\x87\x4d\xf8\x1b\x33\xb0\x34\x81\xd9\x04\xac\x92\xbc\xb5\x36\x46\x1f\x66\x77\xe7\x83\x5c\x40\x17\x4e\x3e\x08\x41\x57\x51\x77\xe8\x1d\x24\x6d\x85\x61\x07\x87\xed\x4a\x5d\xea\x06\xb9\x7d\xda\xe9\xb7\x68\xa7\xff\x4f\x3b\xcd\x69\x6f\x14\x22\x8a\xcb\x9d\x9e\x4d\x20\x44\xaa\x92\x71\xea\x06\xb9\x79\x4f\x1e\x59\xcc\xd6\x32\x92\x94\xcd\xee\x8e\x9d\x2d\xcb\xfb\xb5\x4a\xd7\x91\xe4\xa7\x85\x63\x6d\x51\x6b\x2f\x32\xad\xaa\x73\xdc\xa1\xc7\x84\xf8\x4b\xfe\x93\x4a\x21\x29\x73\x9a\x54\x9a\x29\x5c\x16\xe5\x05\x79\x3e\x96\xca\xe3\x3e\xf0\xa1\x03\x2c\x75\x69\x70\x96\x00\x91\x0e\x9d\xd1\x3c\xff\x2d\x80\x09\x01\x51\x4d\x1f\xc0\xc8\xe3\x5a\x71\x46\xed\xac\xb9\x67\x96\xa9\x6d\x19\xed\xa4\xca\x05\x0b\x46\x8d\xa9\x52\xcf\x5b\xb3\x88\x29\x8e\x1e\xe9\x72\x49\x1d\xd7\x75\xbb\x0d\x08\x60\xa7\xf7\x08\x31\xa3\x2d\x90\x86\x98\x19\xb6\x6b\x30\x7b\x66\x60\x9f\x17\x60\x6d\x1e\xcc\xc1\x4f\xca\xa3\x5f\xf2\x15\x39\x11\x26\x04\xbe\x6f\x01\x1d\x29\x50\x91\xdc\x48\x34\xd6\xaa\xf4\x0b\x71\xfb\x74\xaf\xc8\x51\xee\xd1\xd4\x7c\x71\xd1\xb3\x2e\x5d\x8d\x02\xdf\x6f\x9b\x7a\x2b\x6b\x23\x5f\x1d\x65\x74\x29\x91\x87\x52\xc1\xeb\x79\x54\xa0\xef\xa5\x51\x05\xe9\x66\x51\xb5\xf2\xa3\x54\x65\x03\xf3\x8b\xdb\xd9\x3c\xf9\x67\x8b\xd9\xed\x5c\x1b\x59\x6e\xfa\x81\xe7\xc5\x2a\x1e\xcf\x46\x5a\x60\x42\x46\x67\xdd\x47\x21\xd2\x4c\xcc\x7e\x5b\xaa\xec\x15\x13\x9d\x1a\x8e\x5f\x33\x9e\x85\xb3\x63\x24\x6c\x8f\xce\x6c\xd2\xfe\x59\x19\x64\x84\x7f\xec\x62\xca\x8a\x9c\x1c\x37\x7f\x54\xaf\x15\xd1\x8d\x18\x49\xf5\xd9\x95\xe2\x78\xfe\x6e\xd5\xbd\x3e\x2d\x9c\xde\x9c\x8d\x81\x98\x09\x91\x7e\x30\x65\xd5\xd7\x9a\xd1\x1a\xa8\x5b\x08\x4f\xed\x73\xf1\x53\x06\xa1\x13\x75\xe8\x09\x8c\x75\x22\xa9\x72\x9c\x4d\x2a\x40\xe9\x71\x1a\x9c\xfe\x0b\x00\x00\xff\xff\x91\xde\x88\x04\x7a\x09\x00\x00"

func userAdd_liquidityCdcBytes() ([]byte, error) {
	return bindataRead(
		_userAdd_liquidityCdc,
		"user/add_liquidity.cdc",
	)
}

func userAdd_liquidityCdc() (*asset, error) {
	bytes, err := userAdd_liquidityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/add_liquidity.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd9, 0x74, 0xa2, 0x2c, 0x58, 0x8, 0xc3, 0x93, 0xcb, 0x47, 0x18, 0xd9, 0x8e, 0xb8, 0xbd, 0xcb, 0xb1, 0x98, 0xad, 0xea, 0x8d, 0x67, 0x61, 0x9c, 0xe9, 0x4a, 0x6d, 0x82, 0xaf, 0xe3, 0xcf}}
	return a, nil
}

var _userRemove_liquidityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdf\x6b\xdb\x30\x10\x7e\xcf\x5f\x71\xcd\x43\xb1\xa0\x91\x13\x18\x7b\x30\x49\x21\x74\x14\xc6\x06\x0d\x6b\xb7\x97\xb1\x07\x45\xbe\x38\xa2\x8e\xe4\x49\xe7\x66\xa1\xf4\x7f\x1f\xb2\x1d\x47\x76\x7e\xac\x30\x3d\x49\xba\xef\xbe\xbb\xef\xee\x24\xb5\x29\x8c\x25\xb8\x2f\x75\xa6\x96\x39\x3e\x99\x67\xd4\xb0\xb2\x66\x03\x43\xce\x63\xce\x63\x69\x34\x59\x21\xc9\xc5\xe4\x6d\x2e\xee\x40\xb9\x4c\xe5\x70\xd0\x90\x3c\x6e\x45\x71\x2f\x24\x19\xbb\x3b\x43\x11\x20\x8e\x3c\x3f\x6b\x42\xbb\x12\x12\xdd\x05\xe7\x03\xe8\xc8\xff\xce\xe8\x95\xca\x2e\xf8\xd6\x80\x23\xbf\x85\x50\xf6\x82\x97\x37\xd7\x3e\x03\xb2\x42\x3b\x21\x49\x19\x1d\x0d\x00\x00\xf2\xa2\x2a\xc2\x7c\x63\x4a\x4d\x09\x7c\xbf\x57\x7f\x3e\x7e\xb8\xa9\x4c\x55\xb1\xc6\x5f\x70\x97\xc0\x23\x59\xa5\xb3\xe0\x7a\x72\xfa\x7a\xfc\x43\x94\x39\x2d\x04\xad\xbd\xd1\x58\x91\xa1\x3f\x84\x8e\xe7\x10\x0c\x5e\x2b\x54\x61\xb1\x10\x16\xa3\xd2\xa1\x9d\x4b\x59\xa7\x35\x2f\x69\xdd\x1c\xf6\x38\xbf\xe2\x18\x9e\x1e\x3e\x3d\x80\x56\x39\xc8\x35\xca\xe7\xd6\x92\x23\x41\x21\x94\x9d\xa7\xa9\x85\x59\xd8\x56\x9e\x21\x2d\x1a\x0b\x3a\x17\x05\x2a\xdb\xed\x4d\x28\xb2\xdd\xb2\xab\x7e\xe0\x04\x36\xe2\x19\xc1\xd5\x3a\xa0\x10\xb4\x06\x51\x92\x19\x65\xa8\x5b\xec\x8b\xb0\xf0\xe2\x45\x07\x72\x3b\xda\x61\x06\x71\x43\xe1\x1b\x27\x05\x55\x21\x09\x1d\x75\x48\x9a\x56\x55\x05\xfc\x86\x2b\x98\x41\x50\x23\xbe\x34\xd6\x9a\xed\xf4\xba\x6d\x78\x85\xbb\x8d\xfc\x58\x24\x47\x09\xb0\xb3\xcc\x30\x1d\xf5\x23\x5d\xf1\xad\xa2\x75\x6a\xc5\x36\x12\xcd\x9c\x74\xc6\x86\xed\xb9\xde\xd9\x98\xfa\x15\xfa\x40\x19\x52\x93\x7f\xb4\xef\x16\xf3\x0d\xba\x13\x85\x58\xaa\x5c\xd1\x6e\x7a\xfd\xda\x7b\x34\x5e\xdc\xa2\x5c\xe6\x4a\xbe\xdd\x46\xc1\xa3\x38\xdc\x57\x02\x9b\x82\x44\x41\xd7\xfc\xe2\x16\x37\xe6\x05\xbf\xaa\xdf\xa5\x4a\x15\xed\xa2\x50\x6b\x02\xd3\x51\x78\x66\xc7\x69\x8f\xdb\x22\xd5\x2a\x7e\x8e\x7f\x1d\x57\xe7\x60\x5a\x8a\x5c\x68\x89\x27\x88\x26\x7d\xa2\xc9\x79\xa2\xc9\x09\xa2\x14\x1d\x59\xb3\x6b\x20\x07\x7e\x93\x45\xc3\x99\x5f\xb7\x50\x4b\x85\x7c\xaf\x35\x81\x21\xaf\x07\xec\x30\xf5\xac\x73\x53\x8d\x39\xeb\x92\x59\xa4\xd2\xea\x7d\xd3\xea\xcc\x5c\xd2\x63\xaa\xc4\xec\x93\xe4\x64\xea\x9f\x21\x62\x2d\xfd\xf0\x06\x86\xbd\x58\x67\x7d\xd8\x3b\xe6\xe8\xd4\xe8\x77\xbf\xf5\xce\xfc\xf7\x7e\x27\x76\xc5\x53\x2c\x8c\x53\xd4\xd8\xa7\xa3\x00\xc1\xfe\x2b\xca\xe4\x9f\x51\x26\x4d\x94\x2a\xcc\xdb\xe0\xed\x6f\x00\x00\x00\xff\xff\xf9\x66\xe5\x4f\xc1\x06\x00\x00"

func userRemove_liquidityCdcBytes() ([]byte, error) {
	return bindataRead(
		_userRemove_liquidityCdc,
		"user/remove_liquidity.cdc",
	)
}

func userRemove_liquidityCdc() (*asset, error) {
	bytes, err := userRemove_liquidityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/remove_liquidity.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0x87, 0x43, 0xa4, 0x42, 0x47, 0x63, 0x35, 0x92, 0x4b, 0x47, 0xf5, 0x5c, 0xa, 0xfb, 0x33, 0xf1, 0x83, 0xff, 0x43, 0xf6, 0x6b, 0xd9, 0xaa, 0xdb, 0x17, 0x25, 0x6a, 0x4, 0x87, 0x90, 0x84}}
	return a, nil
}

var _userSwap_exact_tokens_for_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6b\xe3\x38\x10\x7f\xcf\xa7\x98\xcd\xc3\xe2\xd0\xd4\x69\xe1\xb8\x07\x13\x17\xba\xbd\x14\xcc\xb2\x6d\x69\xda\xe5\xa0\x84\x45\xb1\xa7\x8e\xa8\x2d\x09\x79\xdc\x24\x2c\xf9\xee\x87\x1c\x3b\x96\x62\x37\xf7\x87\x5b\x3f\x84\xd8\xf3\x9b\xdf\xfc\x1f\x89\xe7\x4a\x6a\x82\xdb\x52\xa4\x7c\x99\xe1\x93\x7c\x43\x01\xaf\x5a\xe6\x30\xf4\xfd\x89\xef\x4f\x62\x29\x48\xb3\x98\x8a\x09\x19\x59\x31\x71\xa0\x7e\x9c\xc4\xc3\x41\x4d\x32\x5f\x33\xf5\x28\x4b\x42\xfd\x01\x43\x0b\xe8\xe8\xcd\xb4\x96\xa7\xd4\x2a\xf9\x5e\x6b\x30\x99\x40\x82\x2a\x93\x5b\x88\x65\x82\x10\x4b\xc5\x31\x81\xe5\x16\x58\xfd\x1d\x13\x68\xb4\x07\xa4\x99\x28\x58\x4c\x5c\x0a\x6f\x00\x00\x50\x85\xf1\x15\xb7\x0f\x8c\x56\xb7\x19\xa3\x00\x5e\xe6\xa4\xb9\x48\x17\xe3\x4a\xce\x72\x59\x0a\xba\x2f\x69\xae\x32\x6e\xa4\xcf\xb7\x7c\xf3\xfb\x6f\x8e\x34\x12\xdf\xd8\x26\x80\xbd\x64\x2f\x48\x90\x25\x19\x17\xd8\x7e\x6d\xad\x45\xe2\x3b\x2b\x33\x32\x16\x03\x98\x93\xd4\x2c\x45\xf3\x32\x6e\x21\xf7\x25\xfd\x13\xcc\x23\xc6\xc8\xdf\x51\xef\x61\x0f\xe5\x32\xe3\x71\x17\xf5\x85\x65\x4c\xc4\xd8\x05\x8d\xe0\x67\x05\x54\x1a\x15\xd3\xe8\x95\x05\xea\xeb\x38\x36\x21\x05\x70\x5d\xd2\xaa\x7e\x69\x70\x55\xc4\x45\x81\x9a\xbc\x43\x80\x70\x15\x42\x8a\x74\x53\x6a\x8d\x82\xbe\x64\x32\x7e\xf3\x46\x3e\xf1\x1c\x0b\x62\xb9\x1a\x43\x8e\x45\xc1\x52\x0c\x0e\x0c\xe6\x69\x6b\x58\xfd\xce\x84\x29\x9d\xe7\x40\xcc\x93\x17\x69\x00\xc3\xd9\x9f\x0f\xd1\xe3\xec\x8f\xe1\xb8\x23\x47\xad\x83\x63\xae\x1b\x99\xa0\x5f\xab\x38\x0a\xa3\x41\xfb\xef\xf0\xf7\x9d\x69\xc8\x50\x40\xd8\x69\x04\x3f\x43\x91\xd2\xaa\x85\x66\x48\x4d\xfd\xbe\xe2\xb6\x47\xe3\xe5\x62\xd1\x05\xdf\x97\xf4\x01\x3a\x43\x71\x7e\xb9\x70\x5d\x69\x54\xae\xab\xbe\x7a\x92\xc4\x32\x08\xe1\xc2\xbf\xe8\x87\x35\xf5\x7f\xc4\x57\x08\xc1\x2a\x9f\xbf\x94\x5a\xcb\xf5\xf4\xb3\x3b\x9e\x55\x4f\x5d\x79\x66\xae\x82\x6e\xa3\xb5\x09\xe2\xaf\xfd\x26\x42\x10\x3c\xb3\x9a\xc1\x3c\x93\x89\x6d\xb7\x60\xef\xe8\x4d\xcf\xa1\xb2\x77\x79\xc7\x72\xf4\x63\x8d\x8c\x70\x96\x2b\xda\x56\xa6\xbc\xd1\x18\x48\x9e\xb4\xdf\xe5\xcd\xb8\x78\x9b\x7e\xb6\x58\x2b\xad\x9f\x6e\x78\x8d\xaf\xbb\x2b\xaf\x6f\x42\xc6\x40\x4c\xa7\x48\xbf\xc2\x74\x3d\x63\x96\x65\x6b\xea\x4e\x1a\x76\x2c\xff\xea\xc2\xee\xdc\x3e\x52\x8c\x56\x91\x48\x70\x63\x9a\xcc\x91\xf0\xce\x17\x55\xad\x8f\x66\x39\x42\x08\x2f\x0b\x47\xde\xac\x42\xbb\x69\x1b\xf9\x7a\xc5\x33\xf4\x38\x4c\xcd\xac\x8d\x8e\x1a\xc8\x28\xc7\xa5\x7e\xaa\xe7\xa3\x6f\x54\xf8\xc2\xd1\x30\xae\xf8\x4c\x29\x14\x89\x67\x69\xba\x45\xe4\xaf\xe0\x39\xb4\xa1\x3d\x90\xc7\x4e\x54\x33\x2b\x53\x4f\x75\x6b\x72\x3c\x74\xb3\x8d\xc2\xb8\x9e\x50\x08\x8f\x0e\x88\x97\x43\x4a\x17\x5d\x7e\xa4\x1a\x5d\x40\x68\x1d\x8f\x7e\x8a\x35\x5d\x11\x09\xef\xc0\x17\xf4\x5a\x1c\x3b\xd9\x09\x40\x75\xba\xd7\xf1\x37\x12\x47\x8e\x16\xf6\x96\x6a\x9e\xe3\xda\xb9\xef\x67\x2e\x55\x37\x3b\x26\x71\x43\x2e\x60\xe8\xc7\x52\xc4\x8c\x3c\x07\xef\x93\xdc\x37\x8d\x37\x1a\xf5\xa4\xd6\x5a\xab\x55\xc3\xc2\xf4\xfc\x3f\x35\xbc\x75\xaa\x8e\x3e\xf9\x6b\x4e\xab\x44\xb3\x75\x9d\xce\xc0\x0d\xe1\x94\x1b\xcd\xe0\x18\x3f\xac\x1a\x15\x6b\xa6\xbc\x77\x23\x88\x44\x60\x64\xb6\xd1\xfe\xa2\xf4\xe7\x49\x96\x74\x94\xa8\xc6\xa2\xbf\xdc\xaf\x8c\xbf\x49\x58\xff\x19\xd1\xf7\xf5\x0c\x7a\xf9\x3f\x64\xb4\xb6\xce\x27\x3f\x41\x25\x0b\x4e\x75\x8a\x9b\x80\x1b\xae\x1e\xbf\x4c\xd0\xee\x5a\xb0\x25\xcd\x9a\x69\xff\x9f\xc1\xa5\x83\xdc\xb9\xe3\x0b\x21\x70\x07\xd3\xca\x07\x4e\x42\xa9\x8a\xb5\x37\xad\x56\x32\xdc\xa4\x3a\x04\x39\xdb\x80\xdd\xbd\xd6\xa5\xee\x83\x52\x34\x97\x20\x77\x4e\xa6\xa1\x7d\x1f\xfc\x7f\x6e\x3e\x37\xb3\xf9\x3c\xfa\x3e\xfb\x11\xdd\x3d\x3c\x3f\xfd\xb8\xfe\x76\xff\x7c\xf7\xf4\xef\x2e\x42\x7d\x0c\xa7\xef\x45\xbb\xc1\xee\xaf\x00\x00\x00\xff\xff\xe0\x45\x44\x48\x08\x0c\x00\x00"

func userSwap_exact_tokens_for_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_exact_tokens_for_tokensCdc,
		"user/swap_exact_tokens_for_tokens.cdc",
	)
}

func userSwap_exact_tokens_for_tokensCdc() (*asset, error) {
	bytes, err := userSwap_exact_tokens_for_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_exact_tokens_for_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0xc4, 0x4e, 0x37, 0xe5, 0x19, 0x10, 0xbc, 0xbc, 0xba, 0xa6, 0xb0, 0x2c, 0x60, 0x22, 0xe3, 0x70, 0x56, 0x9b, 0xb5, 0xae, 0xfd, 0x69, 0x49, 0x27, 0x1a, 0x19, 0xa6, 0x21, 0x6f, 0x3f, 0xe7}}
	return a, nil
}

var _userSwap_exact_tokens_for_tokensTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xda\x48\x10\x7e\xe7\xaf\x98\xf2\x50\x19\x95\x98\x44\x3a\xdd\x83\x15\x47\xa2\x39\xa8\xac\xb6\x01\x81\x39\x9d\x14\x21\xb4\xd8\x13\xb3\x8a\xbd\x6b\xad\xc7\x21\xa8\xca\xff\x7e\x5a\x1b\x63\x2f\x36\xb9\xde\xa9\xc7\x03\xb2\xfd\x7d\x33\xb3\xf3\xe3\xdb\x5d\x9e\xa4\x52\x11\xf8\xf2\x19\xc5\xcd\x03\x4b\x10\x9e\x94\x4c\x8e\xef\xe3\x30\x54\xbd\xde\x91\x32\xcd\x45\xc4\xb7\x31\x16\x50\xc9\xea\xdb\xf6\xc8\xb6\x47\x81\x14\xa4\x58\x40\xd9\x88\x34\x96\x8d\x0c\xaa\x1d\x84\x41\xbf\x72\xb2\xdc\xb3\x74\x21\x73\x42\x75\xc1\x43\x4d\x68\xd9\x4d\x94\x92\xef\x99\x15\x78\x69\xd5\x1b\x8d\x20\xc4\x34\x96\x07\x08\x64\x88\x10\xc8\x94\x63\x08\xdb\x03\xb0\xe3\x77\x0c\xa1\xb2\xee\x91\x62\x22\x63\x01\x71\x29\xac\x1e\x00\x40\x91\xc6\x57\x3c\xcc\x19\xed\xa6\x31\x23\x07\x1e\x97\xa4\xb8\x88\xd6\xc3\x02\x67\x89\xcc\x05\x79\x62\x99\xc6\x5c\x83\xab\x29\x7f\xfd\xfd\x37\x03\x9c\xe5\xf4\x9d\x0b\x07\x4a\xa8\x44\x42\x64\x61\xcc\x05\xd6\x5f\xeb\x68\x9e\xf8\x93\xe5\x31\xe9\x88\x0e\x2c\x49\x2a\x16\xa1\x7e\x19\xd6\x94\x59\x4e\x3f\xc3\x59\x60\x80\xfc\x05\x55\x49\x9b\xe7\xdb\x98\x07\x6d\xd6\x67\x16\x33\x11\x60\x9b\x34\x80\x1f\x05\x31\x55\x98\x32\x85\x56\x9e\xa1\x1a\x07\x81\xce\xc9\x81\x71\x4e\xbb\xe3\x4b\xc5\x2b\x52\xce\x32\x54\x64\x9d\x12\x84\x3b\x17\x22\xa4\xfb\x5c\x29\x14\xf4\x39\x96\xc1\xb3\x35\xb0\x89\x27\x98\x11\x4b\xd2\x21\x24\x98\x65\x2c\x42\xe7\xe4\x41\xff\xea\x1e\x16\xff\x13\xa1\x5b\x67\x19\x14\xfd\x4b\xb2\xc8\x81\xfe\xe4\xaf\xb9\xb7\x98\xfc\xd1\x1f\xb6\x70\x54\xca\x39\xf7\x75\x2f\x43\xb4\x8f\x26\x86\xc1\xa0\x57\x3f\x9d\x1e\x5f\x98\x82\x18\x05\xb8\xad\x41\xb0\x63\x14\x11\xed\x6a\x6a\x8c\x54\xf5\xef\x2b\x1e\x3a\x2c\x1e\xaf\xd7\x6d\xf2\x2c\xa7\x0b\xec\x18\xc5\xd5\xcd\xda\x5c\x4a\x65\x32\x2e\x06\xcb\x97\xc4\x62\x70\xe1\xda\xbe\xee\xa6\x55\xfd\x5f\xe0\x13\xb8\xd0\x68\x9f\xbd\x95\x4a\xc9\xfd\xed\x47\x53\x9e\xc5\x4c\xdd\x59\x5a\x57\x4e\x7b\xd0\xea\x02\xf1\xa7\xee\x10\x2e\x08\x1e\x37\x86\x41\xff\x9a\x51\x33\xf6\x82\xd6\xed\x55\x63\x8b\xb1\x03\x85\x8c\x70\x92\xa4\x74\x28\x02\x59\x83\x21\x90\x7c\x37\xfa\xb9\xd7\x98\x8b\xe7\xdb\x8f\x0d\x9f\x85\xcd\x0f\x33\xb5\x6a\x9d\x6f\x77\x56\x97\x3a\x86\x40\x4c\x45\x48\xbf\x3e\xf0\x51\x5d\x8d\xb8\x0d\xbd\xbd\x1b\xd6\x88\xfb\x7f\xb7\xf4\xcd\x9c\xa0\x94\xd1\xce\x13\x21\xbe\xea\xf1\x32\x10\xde\xfa\x92\x16\x1b\x47\xb5\x2d\x82\x0b\x8f\xf5\x9c\xef\x77\x3c\x46\x8b\xc3\xad\x56\xd1\xe0\x6c\x34\xb4\x71\x90\x2b\xff\x38\xf9\x5d\x22\xe0\x6b\xc3\x42\x87\xb2\x59\x9a\xa2\x08\xad\x86\xa5\xd9\x22\xfe\x04\x96\xe1\xd6\x6d\x4a\xed\x7c\x11\x85\x1a\x65\x64\xa5\xad\x56\x1b\x6a\xf2\x44\xa9\x39\x70\xcd\x2d\xff\xf1\x54\xa9\x75\xa7\xdb\x3e\x17\xd0\xb7\x03\x29\x02\x46\x96\xe1\xc9\x26\x59\x96\xcc\x1a\x0c\xce\x9a\x0d\xe6\x76\x52\xb4\x0b\x6e\xaf\xfe\x53\xbb\x1b\xa7\xc9\xe0\x83\xbd\xe7\xb4\x0b\x15\xdb\x5b\x65\x12\x8e\x99\xdc\x7b\xcb\xa8\xc6\x46\xaf\xa3\x71\x32\x67\x7b\x96\x5a\x2f\x1a\xf0\x84\xa3\xb1\x66\xd0\xa1\xd1\x50\x07\xd2\xf6\x5c\x9f\xea\x24\x73\x3a\x2b\x54\x15\xd1\xde\x96\x82\xf9\x87\x82\x75\xef\x8d\x5d\x5f\x3f\x41\xa7\xff\x8b\x1e\x1b\x9a\xfb\x60\x87\x98\xca\x8c\xd3\xb1\xc4\x55\xc2\x95\xaf\x8e\x75\xe9\xa4\x4d\x51\x34\x91\x4a\x64\xf5\xf3\x27\xb8\x31\x98\x6f\xe6\x70\x83\x0b\xdc\xe0\xd4\x78\xcf\x28\x28\x15\xb9\x76\x96\xb5\x51\x0c\xb3\xa8\x86\x83\x84\x0b\xd3\xbc\x79\x9d\xb9\xd0\x8c\xea\xf8\xef\x2a\xfb\x9d\x6b\x5c\x88\x7e\xc5\xd1\xef\x3d\x2c\x57\xd3\xa9\x77\xef\x4d\x1e\xfc\xcd\x6c\xe5\xcf\x57\xfe\x66\xfc\x7d\xb6\x7a\xf0\x01\x5f\x53\x0c\x08\x92\xa6\xfe\x2e\x25\x50\xe1\x7d\x88\x24\x41\x7f\xf0\x93\xf5\xfa\x17\x17\x8e\xe5\x37\x6f\x3e\x1f\x7f\x99\x6c\x66\xd3\xe9\x72\xe2\x6f\xfc\xd9\x6c\xf3\x6d\xbc\xf8\x32\xb9\x78\x05\x29\x5b\xfb\xf6\x77\x00\x00\x00\xff\xff\x24\xd3\x61\x87\x95\x0b\x00\x00"

func userSwap_exact_tokens_for_tokensTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_exact_tokens_for_tokensTemplate,
		"user/swap_exact_tokens_for_tokens.template",
	)
}

func userSwap_exact_tokens_for_tokensTemplate() (*asset, error) {
	bytes, err := userSwap_exact_tokens_for_tokensTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_exact_tokens_for_tokens.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xe7, 0xa8, 0xa5, 0xc8, 0x80, 0x53, 0x40, 0xc1, 0xb0, 0x61, 0xe1, 0xbe, 0x96, 0x4c, 0x9, 0x54, 0x12, 0xd9, 0x87, 0x16, 0x2f, 0x3b, 0x9, 0xce, 0x8c, 0xa6, 0x61, 0xba, 0x17, 0xdd, 0x7}}
	return a, nil
}

var _userSwap_tokens_for_exact_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x6f\x9b\x48\x10\x7f\xf7\xa7\x98\xfa\xa1\xc2\xad\x83\x13\xe9\x74\x0f\x28\x44\x72\x73\x76\x85\xda\xc6\x56\xec\x9c\x4e\x8a\xa2\x68\x03\x13\xbc\x0a\xec\xa2\x65\x88\x13\x55\xf9\xee\xa7\x05\x63\x76\x0d\x76\x73\x77\xa9\xee\xa5\x3c\x58\x86\xf9\xcd\xcc\xce\x9f\xdf\x30\xf0\x34\x93\x8a\x60\x5a\x88\x98\xdf\x25\xb8\x94\x0f\x28\xe0\x5e\xc9\x14\xfa\xae\x3b\x72\xdd\x51\x28\x05\x29\x16\x52\x3e\x22\x2d\xcb\x47\x16\xd4\x0d\xa3\xb0\xdf\xdb\x18\x59\xac\x59\x76\x29\x0b\x42\xb5\xc7\x42\x03\x68\xe9\x4d\x94\x92\x87\xd4\x4a\x79\xa5\xd5\x1b\x8d\x20\xc2\x2c\x91\xcf\x10\xca\x08\x21\x94\x19\xc7\x08\xee\x9e\x81\x6d\x9e\x63\x04\xb5\x76\x8f\x14\x13\x39\x0b\x89\x4b\xe1\xf4\x00\x00\xca\x30\xbe\xe0\xf3\x9c\xd1\x6a\x9a\x30\xf2\xe0\x7a\x41\x8a\x8b\xf8\x66\x58\xca\x59\x2a\x0b\x41\xb3\x82\x3c\xb8\x9a\xf2\xa7\xdf\x7f\xab\x1e\x1b\xb2\x40\x2c\xb2\x84\x6b\xc5\x0a\xb0\xab\xf8\x8d\x0b\x5b\x37\x42\x16\x25\x5c\x60\xf3\xb4\x39\x49\x20\xfe\x64\x45\x42\xfa\x34\x1e\x2c\x48\x2a\x16\xa3\xbe\x19\x36\x90\x59\x41\xaf\xc1\x5c\x62\x88\xfc\x11\x55\x05\x9b\x17\x77\x09\x0f\xdb\xa8\x4f\x2c\x61\x22\xc4\x36\x68\x00\xdf\x4b\x60\xa6\x30\x63\x0a\x9d\x22\x47\x35\x0e\x43\x1d\x93\x07\xe3\x82\x56\x9b\x9b\x1a\x57\x86\x9c\xe7\xa8\xc8\xd9\x06\x08\x67\x3e\xc4\x48\xe7\x85\x52\x28\xe8\x53\x22\xc3\x07\x67\xe0\x12\x4f\x31\x27\x96\x66\x43\x48\x31\xcf\x59\x8c\xde\xd6\x82\xbe\x9a\xfa\x96\xbf\x13\xa1\xcb\xea\x58\x10\x7d\xa5\x79\xec\x41\x7f\xf2\xd7\x3c\xb8\x9c\xfc\xd1\x1f\xb6\xe4\xa8\x94\xb7\x6b\xeb\x5c\x46\xe8\x6e\x54\x2c\x85\x41\xaf\xf9\xb7\xfd\xfb\xc8\x14\x24\x28\xc0\x6f\x35\x89\x9b\xa0\x88\x69\xd5\x40\x13\xa4\xba\x7e\x5f\xf0\xb9\x43\xe3\xfa\xf8\xa6\x0d\x9e\x15\xb4\x07\x9d\xa0\x38\x3a\xb9\xb1\x8f\x52\xab\x8c\xcb\xc6\x5a\x4a\x62\x09\xf8\x70\xec\x1e\x77\xc3\xea\xfa\x5f\xe2\x3d\xf8\x60\x94\xcf\xbd\x93\x4a\xc9\xf5\xe9\x7b\x9b\xba\x65\x4f\x9d\x39\x9a\x73\x5e\xbb\xd1\x9a\x04\xf1\xfb\x6e\x17\x3e\x08\x9e\x18\xcd\xa0\xaf\xd1\xc8\xf4\x9b\xb3\x47\x74\x4e\x8f\xa0\xf4\x77\x72\xc1\x52\x74\x43\x85\x8c\x70\x92\x66\xf4\x5c\xba\x72\x06\x43\x20\x79\xd0\x7f\xdb\x6e\xc2\xc5\xc3\xe9\x7b\xc3\x6a\xa9\xf5\xdd\x0e\xaf\x3e\xeb\xcb\x99\xd3\xc5\x90\x21\x10\x53\x31\xd2\xcf\x70\xbd\xe1\x98\xe1\xd9\x60\xdd\x41\xc7\x96\xe7\x9f\x5d\xd8\x17\xbb\x8f\x32\x46\xab\x40\x44\xf8\xa4\x9b\xcc\x92\xf0\xd6\x93\xac\x1c\x1f\xf5\xe0\x04\x1f\xae\x9b\x6e\x5f\xaf\x78\x82\x0e\x87\x53\xcd\xa5\xc1\x4e\x83\x68\xe5\xb0\x50\xcb\x4d\xff\x77\x51\x81\xdf\x58\x1a\xda\x95\xcb\xb2\x0c\x45\xe4\x18\x9a\x76\x91\xf8\x3d\x38\x96\x59\xdf\x24\xdc\xee\x21\x4a\x4e\xca\xd8\xc9\x5a\xc5\xb6\x38\x15\x88\x8a\x79\xe0\xdb\x83\xff\x7a\x9b\xa9\x9b\x4e\xb3\x7d\x2e\xa0\xef\x86\x52\x84\x8c\x1c\xcb\x92\x4b\xb2\x4a\x99\x33\x18\xec\x14\x1b\xec\xa1\x52\x96\x0b\x4e\x8f\xfe\x55\xb9\x8d\x77\xca\xe0\x9d\xbb\xe6\xb4\x8a\x14\x5b\x3b\x55\x10\x9e\x1d\xdc\xa1\x63\xd4\x6d\xa3\xcf\x61\xbc\xbb\xf3\x35\xcb\x9c\x47\x2d\x08\x84\xa7\x65\xa6\xd3\xa1\x55\x50\x0f\xb2\x76\x5f\x6f\xf3\x24\x0b\xda\x49\x54\xed\xd1\xbd\xab\x08\xf3\x83\x84\x75\x4f\xc8\xae\xa7\x1f\xa1\xd3\xfe\x5e\x8b\x06\xe7\xde\xb9\x11\x66\x32\xe7\xb4\x49\x71\x1d\x70\x6d\xab\xe3\x5c\x3a\x68\x9b\x14\xa6\xa4\x26\x59\xf3\xff\x23\x9c\x58\xc8\x17\xbb\xb9\xc1\x07\x6e\x61\x1a\x79\xcf\x4a\x28\x95\xb1\x76\xa6\xd5\x48\x86\x9d\x54\xcb\x40\xca\x85\xad\x6e\x2e\x35\x7b\x8a\x51\x2f\x01\x5d\x69\x3f\xf3\xad\xb5\xe8\x2d\x16\x80\xe0\x62\x71\x35\x9d\x06\xe7\xc1\xe4\x62\x79\x3b\xbb\x5a\xce\xaf\x96\xb7\xe3\x6f\xb3\xab\x8b\x25\xe0\x53\x86\x21\x41\x6a\xf2\x6f\x5f\x00\xb5\xbc\x0f\xb1\x24\xe8\x0f\x5e\x99\xaf\x7f\xb0\x76\x2c\xbe\x06\xf3\xf9\xf8\xf3\xe4\x76\x36\x9d\x2e\x26\xcb\xdb\xe5\x6c\x76\xfb\x75\x7c\xf9\x79\xb2\x7f\x11\x69\x92\x3a\xfa\xd0\xb5\x6a\xfc\x1f\x53\xe1\x4d\xa7\x81\x79\x37\xe8\x68\x62\xc3\xd7\x76\xf6\x76\x13\xb7\xad\xfc\x6b\x17\xfa\xb5\x0b\xbd\xc5\x2e\xf4\xdf\x5e\x01\x07\x3f\x0c\x5e\xff\x51\x70\x6d\xde\x6c\xbe\x3e\xf4\x07\x42\x9b\x32\x7a\x6c\xfb\xfa\x3a\x03\x4d\xc5\xea\xdd\xb3\xf9\x90\xb6\x77\x10\xbd\x09\x35\x63\x8f\x64\xc7\xd4\xb3\x21\xac\x35\x18\xbb\x16\x99\x1f\x98\xec\xda\x7c\xb6\x65\xfd\x30\xea\x55\xd9\x7f\xf9\x3b\x00\x00\xff\xff\xa9\xea\x94\x44\x89\x10\x00\x00"

func userSwap_tokens_for_exact_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_tokens_for_exact_tokensCdc,
		"user/swap_tokens_for_exact_tokens.cdc",
	)
}

func userSwap_tokens_for_exact_tokensCdc() (*asset, error) {
	bytes, err := userSwap_tokens_for_exact_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_tokens_for_exact_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xf3, 0xc8, 0xc1, 0x17, 0x57, 0x60, 0x97, 0x68, 0x6b, 0xd0, 0x2, 0x94, 0xd1, 0x72, 0x19, 0x5, 0x78, 0x31, 0xd, 0x9f, 0x36, 0x22, 0xef, 0x8b, 0xc2, 0x2c, 0xf, 0xc2, 0x63, 0x1b, 0x53}}
	return a, nil
}

var _userSwap_with_one_pairTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x8b\xdb\x3c\x10\xc6\xef\xfe\x14\xb3\x39\x2c\x36\x64\xed\x77\xe1\xa5\x87\x90\x2c\xa4\xa5\x0b\xa1\xd0\x84\x6c\xff\x9c\x27\xf2\xc4\x11\xeb\x48\x46\x1e\x27\x0d\x4b\xbe\x7b\x91\x65\xd7\xf2\x3a\x9b\x42\x69\x7d\xb2\xa4\xdf\x33\xcf\x78\x46\x63\xb9\x2f\xb4\x61\xf8\xa2\x9f\x49\xdd\x7f\xc6\x3d\xc1\xd6\xe8\x7d\xb3\x9e\xa7\xa9\x09\x82\x06\x79\xac\x54\x26\x37\x39\xd5\x47\x8e\x1a\xc5\x71\x12\xc7\x89\xd0\x8a\x0d\x0a\x2e\x13\xb6\x67\x65\xd2\x43\x63\x91\x8a\x51\x1b\xe4\xe9\x88\xc5\x23\x0a\xd6\xe6\xf4\x46\x08\x8f\x18\x28\x17\x8a\xc9\x6c\x51\x50\x79\x45\xdc\x41\x03\xfd\x07\xad\xb6\x32\xbb\xa2\x75\xc0\x40\xb7\xd6\x15\x93\xb9\xa2\x73\x80\xd3\x05\x41\x90\x24\x90\x52\x91\xeb\x13\x08\x9d\x12\x08\x5d\x48\x4a\x61\x73\x02\x6c\xf6\x29\x85\x36\x40\xc0\x06\x55\x89\x82\xa5\x56\x61\x00\x00\x50\x17\x71\xa1\x3e\xd1\x69\x02\x4f\x6c\xa4\xca\xc6\xdd\xfe\xb2\xe2\xde\x81\xaf\x98\xef\x75\xa5\x78\x02\x5f\x1f\xe5\x8f\x77\xff\x8f\xfd\xa3\x6f\x58\xe5\xbc\x42\xde\x59\xa5\x36\x98\x91\x5d\xf8\xf2\x65\xc5\x6f\x41\x3e\xb3\x26\x41\xf2\x40\xc6\x61\xab\x6a\x93\x4b\x31\xa4\xde\x63\x8e\x4a\xd0\x10\x8a\xe0\xa5\x06\x0b\x43\x05\x1a\x0a\xab\x92\xcc\x5c\x08\x97\xf7\xbc\xe2\x5d\xb3\x68\x39\xfb\xfc\x7a\xc9\x89\x7b\xdf\x03\xd3\x3b\xf0\x02\xc4\x1b\x6d\x8c\x3e\x4e\x6f\xfb\xd7\xaf\x46\x1f\x42\xdb\xbc\xc9\xa0\x1c\xd1\x4d\x7c\x94\xbc\x4b\x0d\x1e\x43\x6c\xca\xd7\xab\x66\x14\x0c\xed\xdb\x52\x59\x7f\xaf\xfb\xe5\x11\x8b\xef\x92\x77\x4b\x45\x2b\x94\x26\x3c\x58\x66\xa1\x26\x16\xf3\x7d\xc7\x6e\xf5\x5f\xdd\xc7\xae\xd9\xcd\xf6\x7d\xb7\xed\x7a\x1d\x5d\x4c\xc0\x65\x07\xb3\x7e\x46\xf1\xc6\x15\x3e\x18\x16\xef\x80\x66\xd0\xc4\x35\x6d\x61\xf6\x47\x25\xf4\x6f\x4b\x97\xa0\xdc\x5e\xb6\x98\x81\x92\xb9\xd7\x51\xfb\xf8\xae\x25\x1e\x28\x9c\xde\x79\x7f\xa1\x58\x18\x42\xa6\x8f\xfb\x82\x4f\xb5\x51\x18\xd9\xfa\x5c\x75\x7f\x1d\x35\x97\xea\x79\x7a\xeb\xc5\xac\x35\x2f\xfd\x4f\x6b\xf3\x3c\x3f\x84\x97\xae\xf8\x18\x18\x4d\x46\xfc\xf7\x8d\x9b\x11\xf1\x7c\xbd\xa1\xb9\x6a\xdb\xf3\xfd\xd7\x2d\x3d\x77\x76\x17\xac\x6e\xe2\x94\x0a\x5d\x4a\x6e\x02\xb5\x37\xbd\x8d\x15\x5d\x18\x62\x9d\x85\xa3\x99\x7d\x1e\xc0\x4e\x4c\xfb\x57\x15\x5a\x09\xe4\xb0\x9b\x87\xa8\xdd\x1a\x01\x6b\x18\x45\x3d\xa2\x19\x8d\x0e\x41\x7e\x8d\xb4\x13\x1c\xb3\x76\x3f\xcb\x30\xfa\x5d\xc8\xa1\xc0\x7d\xc0\x39\x38\xff\x0c\x00\x00\xff\xff\x8f\xd9\x7e\x68\x28\x07\x00\x00"

func userSwap_with_one_pairTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_one_pairTemplate,
		"user/swap_with_one_pair.template",
	)
}

func userSwap_with_one_pairTemplate() (*asset, error) {
	bytes, err := userSwap_with_one_pairTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_one_pair.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xe9, 0x86, 0x52, 0x94, 0x63, 0xb5, 0x96, 0x96, 0x8c, 0x7c, 0x22, 0xe2, 0x39, 0xd, 0xd1, 0xd9, 0x76, 0x48, 0x57, 0xeb, 0x94, 0xbe, 0xf2, 0x4c, 0xd3, 0x92, 0xb4, 0x71, 0xf2, 0xd9, 0x4a}}
	return a, nil
}

var _userSwap_with_one_pathTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x51\x6b\xdb\x30\x10\xc7\xdf\xfd\x29\xd4\x3c\x14\x1b\x52\x65\x85\xb1\x87\x90\x14\xb2\xb1\x40\x18\xac\x25\xd9\xf6\x52\xf2\x70\x51\x2e\x8e\xa8\x23\x19\xf9\x9c\x2c\x94\x7c\xf7\x21\xcb\x9e\xe5\xd8\xf5\x60\x6c\x7e\x8a\x72\xbf\xff\xfd\xa5\xd3\x9d\xe4\x21\xd5\x86\xd8\x37\xfd\x82\xea\xfe\x2b\x1c\x90\xed\x8c\x3e\x94\xeb\xd9\x76\x6b\x82\xa0\x44\xe6\xb9\x8a\xe5\x26\xc1\x22\xe4\xa8\x01\xe7\x23\xce\x47\x42\x2b\x32\x20\x28\x1b\x91\x8d\x65\xa3\x06\xca\xc5\x56\x0c\xaa\x24\xab\x13\xa4\x73\x10\xa4\xcd\xf9\x8d\x14\x1e\xd1\x52\x2e\x14\xa1\xd9\x81\xc0\xac\x47\x5c\x43\x2d\xfd\x27\xad\x76\x32\xee\xd1\x3a\xa0\xa5\x5b\xea\x9c\xd0\xf4\xe8\x1c\xe0\x74\x41\x10\x90\x01\x95\x81\x20\xa9\x55\x18\x30\xc6\x58\x51\x97\x85\x9a\x1d\x74\xae\x68\xcc\xbe\xcf\xe5\xcf\x0f\xef\x87\x75\xe8\x0b\x9e\x9f\x80\xf6\x63\xf6\xbc\x22\x23\x55\xbc\x1e\xfa\xb2\x1f\x90\x27\xe4\xe2\x2b\xd2\x06\x62\xb4\x8b\x61\x50\x33\x8f\x39\xbd\x05\xf9\xcc\x12\x05\xca\x23\x1a\x87\x3d\xe5\x9b\x44\x8a\x36\xf5\x11\x12\x50\x02\xdb\x50\xc4\x5e\x0b\x30\x35\x98\x82\xc1\x30\xcf\xd0\xcc\x84\x70\x67\x9a\xe5\xb4\x2f\x17\x15\x67\xbf\xdf\x3f\x12\xa4\xc6\x79\xd8\xe4\x8e\x79\x09\xf8\x46\x1b\xa3\x4f\x93\xdb\x66\xef\x14\xe8\x43\x68\x2b\x3f\x6e\x95\x23\xba\xe1\x27\x49\xfb\xad\x81\x53\x08\x65\x69\x1b\x95\x8e\x82\xb6\x7d\x55\x2a\xeb\xef\x5d\x5d\x76\x82\x34\x3c\xda\xc0\x42\x8d\x6d\xcc\x37\x1b\x5e\xdd\x92\xbf\x8a\x7a\x8e\xfa\x98\x93\xdb\x08\x9b\x36\xcd\xf9\xc6\xd5\x38\x68\x8b\x8f\x60\x5a\xf7\xb5\xc4\x1d\x9b\xfe\x55\xb5\xfc\xc6\xa8\x77\x2a\x77\xdd\x16\x53\xa6\x64\xe2\x5d\x9e\xfd\x7c\xd7\x0c\x8e\x18\x4e\xee\xbc\xd7\x82\x0b\x83\x40\xf8\xf9\x90\xd2\xb9\x30\x0a\x23\x5b\xac\x5e\xf7\xeb\xac\x89\x54\x2f\x93\x5b\x2f\x67\xa1\x79\x6d\x1e\xad\xda\xe7\xe5\x21\xec\xea\xe6\x21\x23\x30\x31\xd2\xbf\x37\x2e\xa7\xc1\xf3\xf5\xe6\xa3\xd7\xb6\xe1\xfb\xbf\xaf\xf4\x52\xdb\x75\x58\xdd\xf0\x2d\xa6\x3a\x93\x54\x26\xaa\xfa\xbb\xca\xd5\x35\x28\x0b\xdb\xe1\x55\xe3\x96\xcd\xfe\xfc\x6e\xdd\xd9\xe5\x1d\xa4\xbf\xe0\x09\xaa\x98\xf6\x77\xf7\xeb\x8e\x61\xd1\x71\x38\x98\xda\xef\x81\xd9\x21\x64\x29\xd0\xbe\x7a\x6a\x85\x56\x02\x28\xac\xf7\x13\x55\x7f\x0d\x18\x69\x36\x88\x1a\x84\xdb\x88\x87\x00\x5d\x23\xd5\xcb\xc0\x49\xbb\x97\x36\x8c\xfe\x94\xb2\x2d\x28\xab\x75\x09\x2e\xbf\x02\x00\x00\xff\xff\x5b\xc1\x2c\x05\x3e\x07\x00\x00"

func userSwap_with_one_pathTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_one_pathTemplate,
		"user/swap_with_one_path.template",
	)
}

func userSwap_with_one_pathTemplate() (*asset, error) {
	bytes, err := userSwap_with_one_pathTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_one_path.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x4c, 0x25, 0x87, 0xf9, 0x20, 0xeb, 0xaa, 0xbe, 0x62, 0x5a, 0xc9, 0xde, 0x35, 0xbb, 0x32, 0x2d, 0x43, 0xfd, 0x5, 0x85, 0x68, 0x8, 0x68, 0xf9, 0xd1, 0xa4, 0xe5, 0xbf, 0xb2, 0xad, 0xeb}}
	return a, nil
}

var _userSwap_with_pair_pathTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x51\x6b\xdb\x30\x10\xc7\xdf\xfd\x29\xd4\x3c\x14\x1b\x52\x65\x85\xb1\x87\x90\x14\xb2\xb1\x40\x18\xac\x25\xd9\xf6\x52\xf2\x70\x51\x2e\x8e\xa8\x23\x19\xf9\x9c\x2c\x94\x7c\xf7\x21\xcb\x9e\xe5\xd8\xf5\x60\x6c\x7e\x8a\x72\xbf\xff\xfd\xa5\xd3\x9d\xe4\x21\xd5\x86\xd8\x37\xfd\x82\xea\xfe\x2b\x1c\x90\xed\x8c\x3e\x94\xeb\xd9\x76\x6b\x82\xa0\x44\xe6\xb9\x8a\xe5\x26\xc1\x22\xe4\xa8\x01\xe7\x23\xce\x47\x42\x2b\x32\x20\x28\x1b\x91\x8d\x65\xa3\x06\xca\xc5\x56\x0c\xaa\x24\xab\x13\xa4\x73\x10\xa4\xcd\xf9\x8d\x14\x1e\xd1\x52\x2e\x14\xa1\xd9\x81\xc0\xac\x47\x5c\x43\x2d\xfd\x27\xad\x76\x32\xee\xd1\x3a\xa0\xa5\x5b\xea\x9c\xd0\xf4\xe8\x1c\xe0\x74\x41\x10\x90\x01\x95\x81\x20\xa9\x55\x18\x30\xc6\x58\x51\x97\x85\x9a\x1d\x74\xae\x68\xcc\xbe\xcf\xe5\xcf\x0f\xef\x87\x75\xe8\x0b\x9e\x9f\x80\xf6\x63\xf6\xbc\x22\x23\x55\xbc\x1e\xfa\xb2\x1f\x90\x27\xe4\xe2\x2b\xd2\x06\x62\xb4\x8b\x61\x50\x33\x8f\x39\xbd\x05\xf9\xcc\x12\x05\xca\x23\x1a\x87\x3d\xe5\x9b\x44\x8a\x36\xf5\x11\x12\x50\x02\xdb\x50\xc4\x5e\x0b\x30\x35\x98\x82\xc1\x30\xcf\xd0\xcc\x84\x70\x67\x9a\xe5\xb4\x2f\x17\x15\x67\xbf\xdf\x3f\x12\xa4\xc6\x79\xd8\xe4\x8e\x79\x09\xf8\x46\x1b\xa3\x4f\x93\xdb\x66\xef\x14\xe8\x43\x68\x2b\x3f\x6e\x95\x23\xba\xe1\x27\x49\xfb\xad\x81\x53\x08\x65\x69\x1b\x95\x8e\x82\xb6\x7d\x55\x2a\xeb\xef\x5d\x5d\x76\x82\x34\x3c\xda\xc0\x42\x8d\x6d\xcc\x37\x1b\x5e\xdd\x92\xbf\x8a\x7a\x8e\xfa\x98\x93\xdb\x08\x9b\x36\xcd\xf9\xc6\xd5\x38\x68\x8b\x8f\x60\x5a\xf7\xb5\xc4\x1d\x9b\xfe\x55\xb5\xfc\xc6\xa8\x77\x2a\x77\xdd\x16\x53\xa6\x64\xe2\x5d\x9e\xfd\x7c\xd7\x0c\x8e\x18\x4e\xee\xbc\xd7\x82\x0b\x83\x40\xf8\xf9\x90\xd2\xb9\x30\x0a\x23\x5b\xac\x5e\xf7\xeb\xac\x89\x54\x2f\x93\x5b\x2f\x67\xa1\x79\x6d\x1e\xad\xda\xe7\xe5\x21\xec\xea\xe6\x21\x23\x30\x31\xd2\xbf\x37\x2e\xa7\xc1\xf3\xf5\xe6\xa3\xd7\xb6\xe1\xfb\xbf\xaf\xf4\x52\xdb\x75\x58\xdd\xf0\x2d\xa6\x3a\x93\x54\x26\xaa\xfa\xbb\xca\xd5\x35\x28\x0b\xdb\xe1\x55\xe3\x96\xcd\xfe\xfc\x6e\xdd\xd9\xe5\x1d\xa4\xbf\xe0\x09\xaa\x98\xf6\x77\xf7\xeb\x8e\x61\xd1\x71\x38\x98\xda\xef\x81\xd9\x21\x64\x29\xd0\xbe\x7a\x6a\x85\x56\x02\x28\xac\xf7\x13\x55\x7f\x0d\x18\x69\x36\x88\x1a\x84\xdb\x88\x87\x00\x5d\x23\xd5\xcb\xc0\x49\xbb\x97\x36\x8c\xfe\x94\xb2\x2d\x28\xab\x75\x09\x2e\xbf\x02\x00\x00\xff\xff\x5b\xc1\x2c\x05\x3e\x07\x00\x00"

func userSwap_with_pair_pathTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_pair_pathTemplate,
		"user/swap_with_pair_path.template",
	)
}

func userSwap_with_pair_pathTemplate() (*asset, error) {
	bytes, err := userSwap_with_pair_pathTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_pair_path.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x4c, 0x25, 0x87, 0xf9, 0x20, 0xeb, 0xaa, 0xbe, 0x62, 0x5a, 0xc9, 0xde, 0x35, 0xbb, 0x32, 0x2d, 0x43, 0xfd, 0x5, 0x85, 0x68, 0x8, 0x68, 0xf9, 0xd1, 0xa4, 0xe5, 0xbf, 0xb2, 0xad, 0xeb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store":                                  Ds_store,
	"factory/create_pair.template":               factoryCreate_pairTemplate,
	"factory/deploy_pair_template.cdc":           factoryDeploy_pair_templateCdc,
	"test/mint_all_tokens.cdc":                   testMint_all_tokensCdc,
	"user/add_liquidity.cdc":                     userAdd_liquidityCdc,
	"user/remove_liquidity.cdc":                  userRemove_liquidityCdc,
	"user/swap_exact_tokens_for_tokens.cdc":      userSwap_exact_tokens_for_tokensCdc,
	"user/swap_exact_tokens_for_tokens.template": userSwap_exact_tokens_for_tokensTemplate,
	"user/swap_tokens_for_exact_tokens.cdc":      userSwap_tokens_for_exact_tokensCdc,
	"user/swap_with_one_pair.template":           userSwap_with_one_pairTemplate,
	"user/swap_with_one_path.template":           userSwap_with_one_pathTemplate,
	"user/swap_with_pair_path.template":          userSwap_with_pair_pathTemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store": {Ds_store, map[string]*bintree{}},
	"factory": {nil, map[string]*bintree{
		"create_pair.template": {factoryCreate_pairTemplate, map[string]*bintree{}},
		"deploy_pair_template.cdc": {factoryDeploy_pair_templateCdc, map[string]*bintree{}},
	}},
	"test": {nil, map[string]*bintree{
		"mint_all_tokens.cdc": {testMint_all_tokensCdc, map[string]*bintree{}},
	}},
	"user": {nil, map[string]*bintree{
		"add_liquidity.cdc": {userAdd_liquidityCdc, map[string]*bintree{}},
		"remove_liquidity.cdc": {userRemove_liquidityCdc, map[string]*bintree{}},
		"swap_exact_tokens_for_tokens.cdc": {userSwap_exact_tokens_for_tokensCdc, map[string]*bintree{}},
		"swap_exact_tokens_for_tokens.template": {userSwap_exact_tokens_for_tokensTemplate, map[string]*bintree{}},
		"swap_tokens_for_exact_tokens.cdc": {userSwap_tokens_for_exact_tokensCdc, map[string]*bintree{}},
		"swap_with_one_pair.template": {userSwap_with_one_pairTemplate, map[string]*bintree{}},
		"swap_with_one_path.template": {userSwap_with_one_pathTemplate, map[string]*bintree{}},
		"swap_with_pair_path.template": {userSwap_with_pair_pathTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
