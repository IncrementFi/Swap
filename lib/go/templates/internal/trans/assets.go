// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../cadence/transactions/factory/create_pair.template (511B)
// ../../../cadence/transactions/factory/deploy_pair_template.cdc (574B)
// ../../../cadence/transactions/test/mint_all_tokens.cdc (8.827kB)
// ../../../cadence/transactions/user/add_liquidity.cdc (2.391kB)
// ../../../cadence/transactions/user/swapMultiTest.template (2.245kB)
// ../../../cadence/transactions/user/swap_with_one_pair.template (1.832kB)
// ../../../cadence/transactions/user/swap_with_pair_path copy.template (1.899kB)
// ../../../cadence/transactions/user/swap_with_pair_path.template (1.899kB)
// ../../../cadence/transactions/user/swap_with_paths.template (1.949kB)

package assets_trans

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _factoryCreate_pairTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x4b\xfc\x30\x10\xc5\xef\xf9\x2b\x86\x9e\x52\xf8\x6e\xfa\xed\x75\x59\x85\x45\xf4\x28\x82\xe2\x7d\x4c\x46\x2d\xb6\x99\x30\x9d\xb2\x14\xd9\xff\x5d\xb6\x3f\xd6\xac\x1e\x9c\x53\x5f\xe7\xf3\x92\xf7\x48\xd3\x25\x16\x85\x27\xfe\xa0\xf8\xff\x1e\x3b\x82\x57\xe1\x6e\xd1\xfb\x10\xc4\xe4\x44\xfd\x83\xa8\x27\x62\x45\x1e\x0f\x98\xee\xd0\x2b\xcb\x38\x33\x85\x73\x95\x73\x95\xe7\xa8\x82\x5e\xfb\x2a\x23\x9c\x0f\xbe\x30\xa6\xaa\x20\x50\x6a\x79\x04\xcf\x81\xc0\x73\x6a\x28\xc0\xcb\x08\xb8\xfc\xa7\x00\xab\xdf\xa8\x60\xec\xd1\x6b\xc3\xd1\x96\xf0\x69\x00\x00\x92\x50\x42\x21\x3b\xf4\x24\x7b\xef\x79\x88\xba\x85\xfd\xa0\xef\x8b\x58\xb9\xd3\xb4\xa4\xa0\x53\xb3\x67\x1c\x5a\x85\xdd\x26\x2b\xee\xbc\x10\x2a\xdd\x76\x49\xc7\x69\x6d\xcb\xdf\xc6\xfa\xd2\x58\xff\x65\x3c\x7f\x5c\x34\x9f\xf8\x07\x6c\xc4\x66\x69\xb6\xb0\xdb\x64\xf2\x5f\x7e\xe1\x79\x37\xcb\xd2\x7c\x27\xe3\x37\x5b\x5c\x9d\xe6\x1a\x6e\xa6\x73\x21\xd2\x01\x12\x36\x02\x36\x7b\xd5\x3c\x70\x59\xcc\x01\x8f\xe6\xf8\x15\x00\x00\xff\xff\x19\xc5\xc1\x30\xff\x01\x00\x00"

func factoryCreate_pairTemplateBytes() ([]byte, error) {
	return bindataRead(
		_factoryCreate_pairTemplate,
		"factory/create_pair.template",
	)
}

func factoryCreate_pairTemplate() (*asset, error) {
	bytes, err := factoryCreate_pairTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "factory/create_pair.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xb3, 0x93, 0x8d, 0x47, 0x84, 0x3c, 0x27, 0xb3, 0x90, 0xc8, 0x49, 0xff, 0xfa, 0x95, 0x88, 0x1e, 0x98, 0x4b, 0x83, 0xc7, 0x72, 0xab, 0x5e, 0x6b, 0x7a, 0x9c, 0x7, 0x30, 0x0, 0xc8, 0xf5}}
	return a, nil
}

var _factoryDeploy_pair_templateCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4d\x4f\xf3\x30\x0c\xc7\xef\xfd\x14\x56\x4f\x9d\xb4\x27\x7d\xb8\xa1\x08\x90\x36\x5e\x4e\x3b\x20\x6d\x70\x37\x89\x37\x22\xda\x38\x4a\x5d\xa1\x0a\xed\xbb\xa3\xbe\x8d\xf0\xea\x93\xe3\xf8\xe7\xfc\xff\x8e\xab\x03\x47\x81\xf5\x66\x07\xfb\xc8\x35\xe4\x4a\x95\x4a\x95\x86\xbd\x44\x34\xd2\x94\xc2\x2f\xe4\x9b\x72\xbd\xd9\x29\x63\x4d\x9e\x4d\xc0\xdd\xc3\xf6\xe6\x6f\xa2\xef\x18\x91\xac\x2c\xc1\x52\xa8\xb8\x03\xc3\x96\xc0\x70\x70\x64\xe1\xa9\x03\x9c\xea\x64\x61\xe6\x33\x89\xe8\x1b\x34\xe2\xd8\x17\x01\x5d\xdc\x51\x1d\x2a\x14\xba\x66\x4b\x1a\xb6\x12\x9d\x3f\x2c\xe0\x2d\x03\x00\x08\x91\x02\x46\x2a\xc6\x29\x2b\x63\xb8\xf5\xa2\x61\xd5\xca\xf3\x74\x98\x3b\xfb\xa8\x48\x60\x10\xf7\xff\x11\xdb\x4a\xe0\xe2\x1f\x0c\xb6\x22\xa1\xd0\x6d\x1d\xa4\x1b\xea\xc5\xe2\x3b\x71\x76\x22\x46\x5b\xbf\x23\x9f\xa4\xa8\xd3\x56\x14\x5a\x5b\x78\xac\x49\x43\xbe\x7d\xc5\x70\x8f\x2e\xe6\xcb\x61\x1f\x1a\xbe\xda\x54\xad\xec\xcf\x97\xa9\x56\x9d\xe4\xcb\x54\x92\x4e\xf2\x54\x44\x23\x91\xbb\x74\xc2\xcf\x77\x23\x98\x7d\x18\xe6\x43\x91\x5f\xf6\x71\x05\xbd\x44\x90\x49\xd6\xfc\x81\x4d\x6b\x4c\x3e\x3e\x74\xcc\x8e\xef\x01\x00\x00\xff\xff\xac\xaa\x94\xa1\x3e\x02\x00\x00"

func factoryDeploy_pair_templateCdcBytes() ([]byte, error) {
	return bindataRead(
		_factoryDeploy_pair_templateCdc,
		"factory/deploy_pair_template.cdc",
	)
}

func factoryDeploy_pair_templateCdc() (*asset, error) {
	bytes, err := factoryDeploy_pair_templateCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "factory/deploy_pair_template.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xca, 0x8d, 0x7f, 0x74, 0x8e, 0x17, 0x17, 0x7e, 0xfc, 0x88, 0xe2, 0x60, 0x51, 0x2f, 0xcc, 0x50, 0x3e, 0x5e, 0x49, 0x3b, 0xe5, 0x81, 0x1b, 0xcd, 0x94, 0xde, 0x6d, 0xb, 0x59, 0x7e, 0x49}}
	return a, nil
}

var _testMint_all_tokensCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x99\x4f\x6f\xa3\x3a\x14\xc5\xf7\xf9\x14\x7e\x59\x3c\x11\xa9\x25\x9b\xa7\xb7\xa8\xd2\x6a\xe2\xb4\xac\x58\x8c\x1a\x3a\xdb\x91\x21\x26\x45\x25\x38\x32\x97\x64\xaa\x2a\xdf\x7d\xc4\x9f\x00\x06\x43\x20\x35\x84\xcd\x64\xca\x3d\xe7\xd8\xbe\xfd\x95\xe4\xc6\xdb\xed\x19\x07\x64\x44\xc1\xd6\xb3\x7d\x6a\xb1\x0f\x1a\x20\x97\xb3\x1d\x9a\xea\xfa\x5c\xd7\xe7\x0e\x0b\x80\x13\x07\xc2\x39\xc4\xf7\xc2\xb9\x50\xaa\x3b\x1b\x67\x3a\x99\x64\x2e\xf8\x6d\xfd\xdc\x2e\x8e\x2b\x52\xcd\x39\xf8\xa2\xc4\xa8\x4a\xde\xd6\xcf\xab\x76\x49\x5c\x51\x95\x58\x17\x25\x96\x20\x39\x1a\x3e\x3b\xb6\x6b\x92\x12\x41\x84\xcd\x0b\x31\xd8\xb4\xc4\x23\xb3\x68\x08\xc9\x49\x2e\xdb\x85\x45\x9d\x10\x98\xff\x18\x77\x94\x63\xb9\xfc\xc2\x81\x16\x75\xd9\xea\x81\x93\x20\x24\x0e\x78\x2c\xd0\x76\x5e\x00\xcb\x1d\x8b\x02\x78\x40\x6f\x86\xf7\xe7\xff\xff\x66\xe8\x6b\x32\x41\x08\xa1\x3d\xa7\x7b\xc2\xa9\x16\x7a\xdb\x80\xf2\x07\xb4\x8c\xe0\x7d\xe9\x38\x71\x6d\x5c\x83\xb2\xcb\x67\x5b\x6d\x6a\x15\x96\x68\x0d\x84\x03\xba\x17\x2f\x14\x07\x21\xe2\xfb\x28\x5d\xd5\x74\x96\x1b\xe4\x2f\x0e\x84\xa3\x03\x89\x7c\x58\x03\xe3\x64\x4b\x7f\x12\x78\x47\x8f\x68\x1e\xa6\xff\x9d\xdb\x51\xb8\xf9\x15\xdf\xaf\x2b\x5e\xa9\x43\xbd\x03\xe5\x67\xc9\x3e\xb2\x7d\xcf\x49\x14\xe7\x5b\x75\x11\x26\x3e\x09\x1c\x2a\xd1\x64\x77\x04\x49\x9e\xfe\x4a\x5d\xf4\x88\xd2\x53\xd1\x6d\xc6\x39\x3b\x2e\xfe\x4d\xd8\x48\x6e\x3f\x69\x71\x37\x1e\x6a\x3b\x29\x36\xec\xb9\x15\xb3\x47\x14\x78\x7e\xe9\x48\xe3\x6b\x43\x43\xe0\xec\x13\x2d\xee\xcf\x51\x3e\x23\x9b\xc5\x8f\x65\xf0\xf9\x4a\x43\x16\x71\x87\x36\x27\x09\x4e\x99\x3c\x24\x07\xaa\x2d\xee\x53\x88\x39\x25\x40\x5f\x76\x7b\xf8\x4c\x56\xa1\xcd\xee\x10\xb0\xb6\x35\x97\x8c\x7c\x2f\xf8\x28\x6f\xf8\x4b\xfc\xa3\x72\x3e\xef\xd3\x93\x56\x6b\xcd\x1d\x02\xc2\xb7\x14\xd4\x24\x65\x5d\x3a\x07\x95\xda\xd9\x25\xe7\x94\xbf\x52\xd7\xd9\xb2\xd3\x3f\xfa\x86\xee\x59\xe8\x41\xa6\xca\x8e\x1e\x68\x08\xbf\x63\x18\x28\xd7\xe3\x7f\x92\xad\x84\x1a\xc9\x18\x2c\x78\x9c\xcd\x44\xc4\x12\x80\xa6\xba\xc3\x02\x87\x80\x26\x26\xd9\xe9\xd6\x75\x60\x6b\xe0\x5e\xb0\xd5\x66\x25\xf5\xbc\x7a\x95\x7e\xad\x9b\x61\x73\x25\xb0\x35\x83\xe6\xca\x41\x6b\x84\xcc\x6d\x80\xcc\x6d\x6d\x85\xd1\x0f\x32\xf7\x66\x90\x19\x8a\x20\x33\x46\x83\xac\x31\x49\x15\x64\xea\x3a\xeb\xb6\x42\x66\x28\x84\xcc\x1d\x1a\xb2\x28\xdc\x38\xdd\x21\x8b\xab\xfb\x40\x16\xd7\xcb\x20\xcb\x53\xa5\xad\x48\xde\x7f\x75\x87\x4c\x34\x1b\x13\xb2\xf4\x8d\xe2\xf7\x21\x2b\x36\x3c\x34\x64\x8d\x49\xaa\x20\x53\xd7\xd9\xb2\x53\x1d\xb2\xc4\x49\x11\x64\x62\xd2\x30\x90\x41\x2f\xc8\xa0\x27\x64\xd0\x00\x19\xb4\xb6\xc2\xea\x07\x19\xdc\x0c\x32\x4b\x11\x64\xd6\x68\x90\xc9\x93\x14\x42\xa6\xa8\xb3\x65\x27\x29\x64\x96\x42\xc8\x60\x50\xc8\x8e\xae\xcf\x8e\xdd\x29\x4b\xca\xfb\x60\x96\x08\x64\x9c\x15\xc1\xd2\x76\xa4\x1f\xf3\xbb\x93\x56\xb1\x1b\x13\xb5\x6c\x22\xf1\x7d\xd6\x4a\x7b\x1e\x1a\xb6\xe6\x28\x55\xb4\xa9\xec\xaf\xe0\x55\x07\x2e\xf5\x52\x44\x5c\x25\x6b\x00\xe4\x6c\xd3\xea\x0e\x9c\x6d\x5a\x7d\x70\xb3\x4d\x4b\x3a\x03\xc9\x22\xe5\x1f\x94\xcd\x3e\x8f\x34\xc1\x6a\xd4\x01\x88\xa9\xe4\x81\x96\xef\x76\xf0\xf1\x47\x43\x90\xb2\xe9\x87\xa2\x9e\x96\x7c\x24\xa3\x0f\x53\xd9\xa3\x4c\xc8\x19\x00\x2b\xc8\x87\xb5\xdd\xe9\x2a\x34\x7d\x20\x2b\x54\x32\xd6\x2a\xeb\x90\xb6\xa7\x34\x58\xee\x4e\x9e\xcc\x78\x4c\x00\xcb\xd3\xf0\xef\x73\x58\x3d\x82\xa1\x71\xbc\x90\xa7\x8a\xca\x61\xba\x5f\x77\xad\xa3\x5a\x72\x55\x44\xac\x2c\x75\x48\x70\xf1\x15\xe0\xe2\xab\xc0\xc5\xad\xe0\xe2\x0e\xad\xc3\xd7\x80\x8b\x6f\x0c\x2e\x56\x0a\x2e\x1e\x19\x5c\x79\x9e\x72\x70\x95\x76\xbf\xee\xda\x02\x2e\x56\x0e\x2e\x1e\x07\xdc\xd5\x15\xe0\xae\xae\x02\x77\xd5\x0a\xee\xaa\x43\xeb\xfa\xcc\x48\x65\xc6\x37\x01\x57\xc9\xbc\xb4\x7a\x04\xa3\x81\x3b\xec\xec\x74\x98\xee\xd7\x5d\x5b\xc0\x55\x36\x53\x95\xa5\xb6\x82\x9b\x78\xbc\x04\x9b\xea\xd7\xf6\xe2\x95\x7d\x69\x7f\x9a\x9c\x26\x7f\x03\x00\x00\xff\xff\x0d\x3a\x7b\xb6\x7b\x22\x00\x00"

func testMint_all_tokensCdcBytes() ([]byte, error) {
	return bindataRead(
		_testMint_all_tokensCdc,
		"test/mint_all_tokens.cdc",
	)
}

func testMint_all_tokensCdc() (*asset, error) {
	bytes, err := testMint_all_tokensCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/mint_all_tokens.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x79, 0x54, 0x11, 0x6f, 0x1a, 0xf1, 0xc2, 0x14, 0x35, 0xf4, 0xd3, 0x64, 0x1, 0x99, 0x91, 0xf6, 0x3d, 0xf4, 0x77, 0xfa, 0x2c, 0x83, 0x61, 0x39, 0xf8, 0xa5, 0x65, 0xb7, 0x4e, 0xd4, 0x78}}
	return a, nil
}

var _userAdd_liquidityCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6f\xda\x4a\x10\x7d\xe7\x57\x0c\x3c\x44\xb6\x04\x76\x90\xae\xee\x03\x02\x74\x49\x6e\x23\x45\xad\x14\x94\xa4\x79\x5f\x76\x07\xb3\x8a\xd9\x75\xd7\x63\xa8\x85\xf8\xef\x95\xbf\x17\x9b\x50\xa4\xb4\x3c\xd9\xe3\x33\x73\xce\x9e\x99\x59\xe4\x36\xd2\x86\xe0\x21\x51\x81\x5c\x85\xf8\xaa\xdf\x51\xc1\xda\xe8\x2d\x0c\x3c\xcf\xf7\x3c\x9f\x6b\x45\x86\x71\x8a\x7d\xca\xbe\xc5\xfe\x09\xd4\xe3\x82\x0f\x7a\x65\x91\x97\x3d\x8b\x1e\x18\x27\x6d\xd2\x0f\x4a\x58\x88\x4e\xe6\xa3\x22\x34\x6b\xc6\x31\xbe\x90\xdc\x80\x3a\xf9\xf7\x5a\xad\x65\x70\x21\xb7\x00\x74\xf2\x96\x4c\x9a\x0b\x59\xd9\xe7\x22\xa7\xe7\xfb\x20\x30\x0a\x75\x0a\x5c\x0b\x04\xae\x23\x89\x02\x56\x29\xb0\x32\x8e\x02\xaa\xe4\x1e\x19\xa6\x62\xc6\x49\x6a\xe5\xf4\x00\x00\x72\xfb\x6e\xbf\x62\x3a\x81\x17\x32\x52\x05\xc3\x26\x3c\x3e\x1f\xbe\x7d\x54\x13\xf8\xfe\x20\x7f\xfe\xfb\x8f\x0d\x3e\x1b\xbd\x7d\x63\x49\x48\x4b\x46\x9b\xac\x90\x36\x2c\xc0\xec\xc5\xce\xfb\x08\xe1\xc2\x21\x47\x45\x06\x23\x66\xd0\x49\x62\x34\x0b\xce\x75\xa2\x68\x02\x8b\x84\x36\xe5\x4b\x85\xcb\x7e\xbe\x0f\xaf\x4f\xff\x3f\x81\x92\x21\xf0\x0d\xf2\xf7\xfa\x4b\x88\x04\x11\x93\x66\x21\x84\x81\x99\x3d\x14\x5e\x80\xb4\x2c\xbf\x60\x1c\x3b\x96\x23\xf5\xe3\xd0\x36\xa4\x7e\x74\xfb\x75\xf9\x2b\x15\x58\x9e\xc0\x74\x04\xd6\x91\xbc\x95\x36\x46\xef\xa7\x37\xa7\x83\x9c\x43\xe7\x4e\x36\x08\x93\xb6\xa3\x6e\xdf\xdb\x4b\xda\x08\xc3\xf6\x0e\xdb\x16\xbe\x54\x0d\x72\xbb\xb4\xe3\x4f\xd1\x8e\x7f\x4f\x3b\xce\x68\xaf\x34\x22\x8c\x8a\x9d\x9e\x8e\x20\x40\x2a\xc5\x38\x55\x83\xdc\xac\x27\xf7\x2c\x62\x2b\x19\x4a\x4a\xa7\x37\x87\xd6\x96\x65\xfd\x5a\x26\xab\x50\xf2\xe3\xdc\xb1\xb6\xa8\x89\xe7\x4a\xcb\xd3\x39\x6e\xdf\x63\x42\x7c\x93\x3f\x12\x29\x24\xa5\x4e\x2d\xa5\x9e\xc2\x45\x7e\xbc\x49\xa6\xc7\x72\x79\xd8\x05\xde\xb5\x80\x85\x2f\x35\xce\x32\x20\xd4\x81\x33\x98\x65\xbf\x39\x30\x21\x20\xac\xe8\x27\x30\xf0\xb8\x56\x9c\x51\x33\x6b\xee\x49\x64\x6c\x47\x06\x5b\xa9\x32\xc3\x26\x83\x3a\x54\xba\xe7\xad\x58\xc8\x14\x47\x8f\x74\xb1\xa4\x8e\xeb\x5a\x02\x76\xcc\xc0\x2e\x53\x67\xad\x15\xcc\xc0\x8f\x8b\x57\xbf\x28\x96\x13\x12\xc6\x04\xbe\x6f\x01\x1d\x29\x50\x91\x5c\x4b\x34\xd6\x1e\x74\x55\xba\x5d\xba\x67\xe4\x28\x77\x68\x2a\xbe\x28\x6f\x48\x9b\xae\x42\x81\xef\x37\x1d\xbb\x96\xb5\xf6\xa6\xaa\x32\x38\x27\xe4\xae\xb0\xe7\xb2\x8e\x12\xf4\x39\x19\x65\x91\xb6\x8a\xb2\x4f\x6f\x85\x2b\x6b\x98\x9d\x5d\xbd\xfa\x3e\x3f\xd9\xba\x76\xe7\x9a\xca\x72\xdd\x2d\x3c\xcb\xf7\xec\x70\x32\xaf\x02\x63\x32\x3a\x6d\x6f\x7c\xa8\x99\x98\xfe\xb7\x50\xe9\x33\xc6\x3a\x31\x1c\x3f\x66\x3c\x29\x67\xd7\x88\xd9\x0e\x9d\xe9\xa8\xf9\x27\x32\xc8\x08\xbf\x6c\x23\x4a\x73\x4d\x8e\x9b\xdd\x98\x97\x0e\xd1\xae\x18\x4a\xf5\xde\xb6\xe2\x70\x7a\x29\x55\xbd\x3e\xce\x9d\xce\x9c\x0d\x81\x98\x09\x90\xfe\x30\x65\xd9\xd7\x8a\xd1\x1a\xa8\x6b\x08\x8f\xcd\x5d\xf0\x57\x06\xa1\x55\xb5\xef\x09\x8c\x74\x2c\xa9\x4c\x9c\x8e\x4a\x40\x91\x71\xec\x1d\x7f\x05\x00\x00\xff\xff\xe3\x74\x25\x84\x57\x09\x00\x00"

func userAdd_liquidityCdcBytes() ([]byte, error) {
	return bindataRead(
		_userAdd_liquidityCdc,
		"user/add_liquidity.cdc",
	)
}

func userAdd_liquidityCdc() (*asset, error) {
	bytes, err := userAdd_liquidityCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/add_liquidity.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x76, 0xb9, 0xfc, 0x84, 0x11, 0xfc, 0x11, 0x4a, 0xcf, 0x4b, 0xe2, 0xb7, 0x9e, 0x5, 0xa3, 0x3a, 0x88, 0xe2, 0x39, 0xec, 0x3f, 0x96, 0x80, 0xb1, 0xbd, 0xbb, 0xd, 0x73, 0x6d, 0xf, 0xc}}
	return a, nil
}

var _userSwapmultitestTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5f\x6b\xdb\x3a\x14\x7f\xf7\xa7\x38\xcd\x43\xb1\xb9\x89\x9c\xc0\xe5\xc2\xcd\x92\x42\x36\x56\x08\x83\xb5\xb4\xdb\x5e\x4a\x1f\x14\xf9\x24\x11\x75\x24\x23\x1f\x27\x0b\x25\xdf\x7d\x38\xb6\x63\x29\x72\x33\xd8\xa8\x9e\x2c\x9d\xdf\x39\xbf\xf3\xdf\x71\x2c\x37\x99\x36\x04\xdf\xf4\x0b\xaa\xd1\x57\xbe\x41\x58\x1a\xbd\xa9\xef\xb3\x24\x31\x41\x50\x43\x6e\x0b\xb5\x92\x8b\x14\x8f\xa2\x0a\xd5\x63\x2c\x66\x2c\x16\x5a\x91\xe1\x82\xf2\x98\x4a\x59\x1e\x3b\x50\x26\x12\xd1\x6b\x8c\x3c\xee\x78\x76\xcb\x05\x69\xb3\x7f\xc3\x84\x85\xf0\x34\xe7\x8a\xd0\x2c\xb9\xc0\xfc\x82\x72\x0b\xf2\xf4\x3f\x69\xb5\x94\xab\x0b\xba\x15\xc0\xd3\x7b\xd0\x05\xa1\xb9\xa0\x57\x01\x2a\xbd\x20\x08\xe2\x18\x12\xcc\x52\xbd\x07\xa1\x13\x04\xa1\x33\x89\x09\x2c\xf6\xc0\xeb\x77\x4c\xa0\x31\x10\x90\xe1\x2a\xe7\x82\xa4\x56\x61\x00\x00\x70\x4c\xe2\x5c\xcd\x36\xba\x50\x34\x86\xef\xb7\xf2\xe7\x7f\xff\xf6\x5b\xd1\x17\xdc\xdf\x73\x5a\x8f\xe1\xe9\x91\x8c\x54\xab\xe7\xbe\xad\xf6\x83\x17\x29\x55\xf2\x47\xd2\x86\xaf\xb0\xbc\xf4\x83\x16\x73\x57\xd0\x5b\x20\x1b\xf3\x80\x02\xe5\x16\x4d\x05\xbb\x2f\x16\xa9\x14\x3e\xea\x23\x4f\xb9\x12\xe8\x83\x22\x78\x3d\x02\x33\x83\x19\x37\x18\x16\x39\x9a\x99\x10\x55\x4c\xb3\x82\xd6\xf5\xa5\xc1\x95\xe7\xf4\x91\x22\x39\xf1\xc0\x64\x00\x96\x01\xb6\xd0\xc6\xe8\xdd\xe4\xda\x6d\xb4\x23\xf4\x26\x2c\xcb\x34\xf6\xd2\x11\x5d\xb1\x9d\xa4\x75\x62\xf8\x2e\xe4\x75\x6a\x9d\x4c\x47\x81\x43\xbf\x80\x29\x84\xb6\x11\xb6\xa8\x42\x1d\x0c\xd9\x70\x38\x8a\xe2\xd1\x90\x0d\x5b\x95\x2d\x37\x6e\x76\x4b\x97\xad\xd6\xc8\x77\x3c\x0b\xb7\xa5\x60\xae\xc6\xa5\xcc\x31\xed\x79\xb6\x88\xa0\x7f\x56\x6d\xfb\x16\xb9\xc4\x12\xa6\x30\xfc\x70\x7a\xda\xad\x65\x8a\xa1\x84\x09\xfc\x6f\x67\xd7\x6b\x00\x96\x60\xa6\x73\x49\x75\xc6\xfe\xd2\xe1\x8b\xfe\x42\xe4\xb8\xe1\x14\xbb\x3c\x65\x04\x12\xfe\x81\xd1\xe9\xf5\xe0\x77\xc5\xe9\x23\xc1\x9c\x8c\xde\x3b\x2e\x05\x7e\xf3\xdc\x15\x54\x95\x16\xa6\x67\x81\xd7\xa5\x0c\x7c\xd3\x76\x1d\x9b\x09\x78\xc0\x25\x4c\xff\xa8\xff\xec\x51\x6b\x33\x20\x97\xdd\x14\x53\x50\x32\x3d\x2b\x58\x1c\xdb\xbc\x39\xdf\x62\x38\x19\x58\xeb\x9a\x09\x83\x9c\xf0\xf3\x26\xa3\xfd\x91\x2a\x3c\x16\xe2\x22\xbf\x6f\x37\x95\xea\x65\x72\x6d\x59\x3d\x6a\xbd\xba\xe1\x35\xbe\x1e\x6e\xc2\xae\x1d\xd1\x07\xe2\x66\x85\xf4\x1e\xd4\xf5\x96\xb1\x98\xad\xbd\x73\x91\xb8\xb3\xfb\xdf\xab\xb0\x87\x96\xae\x83\xea\xca\x9f\x37\xc7\x56\xd4\xd1\xc2\xf3\x72\x82\x9a\xf6\xad\x87\xe9\x69\xf8\xdc\xd9\xeb\x1d\x48\xfb\xc2\x52\x54\x2b\x5a\x0f\x46\xcf\x1d\xfb\x56\xaf\xc2\xde\xb4\x3c\x37\x50\x0e\x3e\x64\x9c\xd6\xcd\xff\x4e\x68\x25\x38\x85\xad\x3f\x51\xf3\xd4\x03\xd2\xd0\x8b\x1c\x44\xe5\x88\x05\xe1\x74\x0e\x69\x36\x2e\x23\x5d\xfd\xc1\xc2\xe8\x77\x26\x7d\x85\x3a\x5b\x87\xe0\xf0\x2b\x00\x00\xff\xff\xf3\xb1\x7a\x8b\xc5\x08\x00\x00"

func userSwapmultitestTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwapmultitestTemplate,
		"user/swapMultiTest.template",
	)
}

func userSwapmultitestTemplate() (*asset, error) {
	bytes, err := userSwapmultitestTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swapMultiTest.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xf2, 0xa4, 0x99, 0x4c, 0x59, 0xfd, 0xa2, 0xc9, 0x2b, 0x59, 0x75, 0x8c, 0x9a, 0x1a, 0x2a, 0x43, 0x7a, 0xde, 0x5b, 0x66, 0x3b, 0xdf, 0x1f, 0x35, 0x63, 0xb9, 0x98, 0xfb, 0xba, 0xde, 0x41}}
	return a, nil
}

var _userSwap_with_one_pairTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x4f\x8b\xdb\x3c\x10\xc6\xef\xfe\x14\xb3\x39\x2c\x36\x64\xed\x77\xe1\xa5\x87\x90\x2c\xa4\xa5\x0b\xa1\xd0\x84\x6c\xff\x9c\x27\xf2\xc4\x11\xeb\x48\x46\x1e\x27\x0d\x4b\xbe\x7b\x91\x65\xd7\xf2\x3a\x9b\x42\x69\x7d\xb2\xa4\xdf\x33\xcf\x78\x46\x63\xb9\x2f\xb4\x61\xf8\xa2\x9f\x49\xdd\x7f\xc6\x3d\xc1\xd6\xe8\x7d\xb3\x9e\xa7\xa9\x09\x82\x06\x79\xac\x54\x26\x37\x39\xd5\x47\x8e\x1a\xc5\x71\x12\xc7\x89\xd0\x8a\x0d\x0a\x2e\x13\xb6\x67\x65\xd2\x43\x63\x91\x8a\x51\x1b\xe4\xe9\x88\xc5\x23\x0a\xd6\xe6\xf4\x46\x08\x8f\x18\x28\x17\x8a\xc9\x6c\x51\x50\x79\x45\xdc\x41\x03\xfd\x07\xad\xb6\x32\xbb\xa2\x75\xc0\x40\xb7\xd6\x15\x93\xb9\xa2\x73\x80\xd3\x05\x41\x90\x24\x90\x52\x91\xeb\x13\x08\x9d\x12\x08\x5d\x48\x4a\x61\x73\x02\x6c\xf6\x29\x85\x36\x40\xc0\x06\x55\x89\x82\xa5\x56\x61\x00\x00\x50\x17\x71\xa1\x3e\xd1\x69\x02\x4f\x6c\xa4\xca\xc6\xdd\xfe\xb2\xe2\xde\x81\xaf\x98\xef\x75\xa5\x78\x02\x5f\x1f\xe5\x8f\x77\xff\x8f\xfd\xa3\x6f\x58\xe5\xbc\x42\xde\x59\xa5\x36\x98\x91\x5d\xf8\xf2\x65\xc5\x6f\x41\x3e\xb3\x26\x41\xf2\x40\xc6\x61\xab\x6a\x93\x4b\x31\xa4\xde\x63\x8e\x4a\xd0\x10\x8a\xe0\xa5\x06\x0b\x43\x05\x1a\x0a\xab\x92\xcc\x5c\x08\x97\xf7\xbc\xe2\x5d\xb3\x68\x39\xfb\xfc\x7a\xc9\x89\x7b\xdf\x03\xd3\x3b\xf0\x02\xc4\x1b\x6d\x8c\x3e\x4e\x6f\xfb\xd7\xaf\x46\x1f\x42\xdb\xbc\xc9\xa0\x1c\xd1\x4d\x7c\x94\xbc\x4b\x0d\x1e\x43\x6c\xca\xd7\xab\x66\x14\x0c\xed\xdb\x52\x59\x7f\xaf\xfb\xe5\x11\x8b\xef\x92\x77\x4b\x45\x2b\x94\x26\x3c\x58\x66\xa1\x26\x16\xf3\x7d\xc7\x6e\xf5\x5f\xdd\xc7\xae\xd9\xcd\xf6\x7d\xb7\xed\x7a\x1d\x5d\x4c\xc0\x65\x07\xb3\x7e\x46\xf1\xc6\x15\x3e\x18\x16\xef\x80\x66\xd0\xc4\x35\x6d\x61\xf6\x47\x25\xf4\x6f\x4b\x97\xa0\xdc\x5e\xb6\x98\x81\x92\xb9\xd7\x51\xfb\xf8\xae\x25\x1e\x28\x9c\xde\x79\x7f\xa1\x58\x18\x42\xa6\x8f\xfb\x82\x4f\xb5\x51\x18\xd9\xfa\x5c\x75\x7f\x1d\x35\x97\xea\x79\x7a\xeb\xc5\xac\x35\x2f\xfd\x4f\x6b\xf3\x3c\x3f\x84\x97\xae\xf8\x18\x18\x4d\x46\xfc\xf7\x8d\x9b\x11\xf1\x7c\xbd\xa1\xb9\x6a\xdb\xf3\xfd\xd7\x2d\x3d\x77\x76\x17\xac\x6e\xe2\x94\x0a\x5d\x4a\x6e\x02\xb5\x37\xbd\x8d\x15\x5d\x18\x62\x9d\x85\xa3\x99\x7d\x1e\xc0\x4e\x4c\xfb\x57\x15\x5a\x09\xe4\xb0\x9b\x87\xa8\xdd\x1a\x01\x6b\x18\x45\x3d\xa2\x19\x8d\x0e\x41\x7e\x8d\xb4\x13\x1c\xb3\x76\x3f\xcb\x30\xfa\x5d\xc8\xa1\xc0\x7d\xc0\x39\x38\xff\x0c\x00\x00\xff\xff\x8f\xd9\x7e\x68\x28\x07\x00\x00"

func userSwap_with_one_pairTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_one_pairTemplate,
		"user/swap_with_one_pair.template",
	)
}

func userSwap_with_one_pairTemplate() (*asset, error) {
	bytes, err := userSwap_with_one_pairTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_one_pair.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xe9, 0x86, 0x52, 0x94, 0x63, 0xb5, 0x96, 0x96, 0x8c, 0x7c, 0x22, 0xe2, 0x39, 0xd, 0xd1, 0xd9, 0x76, 0x48, 0x57, 0xeb, 0x94, 0xbe, 0xf2, 0x4c, 0xd3, 0x92, 0xb4, 0x71, 0xf2, 0xd9, 0x4a}}
	return a, nil
}

var _userSwap_with_pair_pathCopyTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x7c\x08\x12\x38\xeb\x06\x4a\x0f\xc6\x0e\xb8\xa5\x01\x53\x68\x42\xd2\xf6\x12\x72\x18\xaf\xc6\xf2\x12\x79\x57\xac\x46\x76\x4d\xf0\x7f\x2f\x6b\x49\xd5\xca\x52\x54\x28\xed\x9e\x34\x9a\xf7\xe6\xcd\xce\xc7\xaa\x6d\x66\x2c\xc3\x37\xf3\x42\xfa\xfa\x2b\x6e\x09\xd6\xd6\x6c\x2b\x7b\x11\xc7\x36\x08\x2a\xc8\x6d\xa1\x13\xb5\x4a\xe9\xe4\x2a\x51\x23\x21\x26\x42\x4c\xa4\xd1\x6c\x51\x72\x3e\x61\xe7\xcb\x27\x2d\xa8\x90\xb1\x1c\xd5\x41\x1e\xf7\x98\xdd\xa2\x64\x63\x0f\x6f\x84\xf0\x10\x1d\xe6\x52\x33\xd9\x35\x4a\xca\x07\xc8\x0d\xa8\xc3\xff\x64\xf4\x5a\x25\x03\xdc\x12\xd0\xe1\x3d\x98\x82\xc9\x0e\xf0\x4a\x40\xc9\x0b\x82\x60\x32\x81\x98\xb2\xd4\x1c\x40\x9a\x98\x40\x9a\x4c\x51\x0c\xab\x03\x60\xf5\x9f\x62\xa8\x03\x04\x6c\x51\xe7\x28\x59\x19\x1d\x06\x00\x00\xa7\x22\x2e\xf5\x62\x6b\x0a\xcd\x53\xf8\x7e\xab\x7e\x7e\x78\x3f\x6e\x5c\x5f\xe8\x70\x8f\xbc\x99\xc2\xd3\x23\x5b\xa5\x93\xe7\xb1\x4f\xfb\x81\x45\xca\xa5\xff\x91\x8d\xc5\x84\x9c\x31\x0e\x1a\xcc\x5d\xc1\x6f\x81\x7c\xcc\x03\x49\x52\x3b\xb2\x25\xec\xbe\x58\xa5\x4a\x76\x51\x1f\x31\x45\x2d\xa9\x0b\x8a\xe0\xf5\x04\xcc\x2c\x65\x68\x29\x2c\x72\xb2\x0b\x29\xcb\x3b\x2d\x0a\xde\x54\x46\x8d\x73\xe7\xf7\x47\x4a\xdc\xba\x0f\xcc\xae\xc0\x0b\x20\x56\xc6\x5a\xb3\x9f\x5d\xb6\x07\xed\x04\xbd\x09\x5d\x9b\xa6\x9d\x72\x44\x17\x62\xaf\x78\x13\x5b\xdc\x87\x58\x95\xb6\x55\xe9\x28\xe8\xca\xd7\xa5\x72\xfa\x5e\x9f\xf3\x3d\x66\xe1\xce\x39\x96\x7a\xea\x7c\xbe\xd8\xf8\xac\x4b\xbe\x15\x0d\x5c\xf5\xae\xe0\x32\x11\x98\xb7\xc5\xc5\xaa\xac\x71\xd0\x25\xef\xd0\x76\xfa\xf5\x40\x6b\x98\xff\x55\xb5\xfc\xc1\x68\x32\x55\xeb\x7e\x89\x39\x68\x95\x7a\xcd\x73\xc7\x57\xcd\x71\x47\xe1\xec\xca\x7b\x5a\x84\xb4\x84\x4c\x9f\xb7\x19\x1f\x4e\x42\x61\xe4\x8a\x35\xa8\x7e\x1e\x35\x55\xfa\x65\x76\xe9\xc5\x3c\x71\x5e\xdb\x57\xab\xf3\x3c\xde\x84\x7d\xd3\x3c\x06\x46\x9b\x10\xff\x7b\xe1\x6a\x1b\x3c\x5d\x6f\x3f\x06\x65\x5b\xba\xff\xbb\xa5\xc7\x46\xae\x47\xea\x42\xc4\x94\x99\x5c\x71\x15\xa8\x9e\xef\x3a\x56\xdf\xa2\x2c\xdd\x84\xd7\x83\x5b\x0d\xfb\xd3\xbb\xe7\xde\x29\xef\x41\xfa\x86\x48\x49\x27\xbc\xb9\xba\x7e\xee\x59\x16\x93\x84\xa3\xb9\x3b\x37\xe0\x96\x10\x32\xe4\x4d\xfd\x2e\x4b\xa3\x25\x72\xd8\xe4\x13\xd5\xbf\x46\xc0\x06\x46\x51\x0b\x51\x26\xe2\x41\x90\xcf\x21\xf5\xcb\x20\xd8\x94\x2f\x6d\x18\xfd\x29\x64\x97\x50\x55\xeb\x18\x1c\x7f\x05\x00\x00\xff\xff\x4b\x1b\x96\x78\x6b\x07\x00\x00"

func userSwap_with_pair_pathCopyTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_pair_pathCopyTemplate,
		"user/swap_with_pair_path copy.template",
	)
}

func userSwap_with_pair_pathCopyTemplate() (*asset, error) {
	bytes, err := userSwap_with_pair_pathCopyTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_pair_path copy.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x4, 0x52, 0x7a, 0xb6, 0x93, 0xf1, 0xc6, 0xe9, 0x55, 0xcc, 0x1c, 0x6e, 0x9c, 0xa6, 0x67, 0xfa, 0x21, 0x96, 0x13, 0xa0, 0x8c, 0x31, 0x5b, 0xc0, 0xff, 0x65, 0xc8, 0xea, 0xa, 0xab, 0xe2}}
	return a, nil
}

var _userSwap_with_pair_pathTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x7c\x08\x12\x38\xeb\x06\x4a\x0f\xc6\x0e\xb8\xa5\x01\x53\x68\x42\xd2\xf6\x12\x72\x18\xaf\xc6\xf2\x12\x79\x57\xac\x46\x76\x4d\xf0\x7f\x2f\x6b\x49\xd5\xca\x52\x54\x28\xed\x9e\x34\x9a\xf7\xe6\xcd\xce\xc7\xaa\x6d\x66\x2c\xc3\x37\xf3\x42\xfa\xfa\x2b\x6e\x09\xd6\xd6\x6c\x2b\x7b\x11\xc7\x36\x08\x2a\xc8\x6d\xa1\x13\xb5\x4a\xe9\xe4\x2a\x51\x23\x21\x26\x42\x4c\xa4\xd1\x6c\x51\x72\x3e\x61\xe7\xcb\x27\x2d\xa8\x90\xb1\x1c\xd5\x41\x1e\xf7\x98\xdd\xa2\x64\x63\x0f\x6f\x84\xf0\x10\x1d\xe6\x52\x33\xd9\x35\x4a\xca\x07\xc8\x0d\xa8\xc3\xff\x64\xf4\x5a\x25\x03\xdc\x12\xd0\xe1\x3d\x98\x82\xc9\x0e\xf0\x4a\x40\xc9\x0b\x82\x60\x32\x81\x98\xb2\xd4\x1c\x40\x9a\x98\x40\x9a\x4c\x51\x0c\xab\x03\x60\xf5\x9f\x62\xa8\x03\x04\x6c\x51\xe7\x28\x59\x19\x1d\x06\x00\x00\xa7\x22\x2e\xf5\x62\x6b\x0a\xcd\x53\xf8\x7e\xab\x7e\x7e\x78\x3f\x6e\x5c\x5f\xe8\x70\x8f\xbc\x99\xc2\xd3\x23\x5b\xa5\x93\xe7\xb1\x4f\xfb\x81\x45\xca\xa5\xff\x91\x8d\xc5\x84\x9c\x31\x0e\x1a\xcc\x5d\xc1\x6f\x81\x7c\xcc\x03\x49\x52\x3b\xb2\x25\xec\xbe\x58\xa5\x4a\x76\x51\x1f\x31\x45\x2d\xa9\x0b\x8a\xe0\xf5\x04\xcc\x2c\x65\x68\x29\x2c\x72\xb2\x0b\x29\xcb\x3b\x2d\x0a\xde\x54\x46\x8d\x73\xe7\xf7\x47\x4a\xdc\xba\x0f\xcc\xae\xc0\x0b\x20\x56\xc6\x5a\xb3\x9f\x5d\xb6\x07\xed\x04\xbd\x09\x5d\x9b\xa6\x9d\x72\x44\x17\x62\xaf\x78\x13\x5b\xdc\x87\x58\x95\xb6\x55\xe9\x28\xe8\xca\xd7\xa5\x72\xfa\x5e\x9f\xf3\x3d\x66\xe1\xce\x39\x96\x7a\xea\x7c\xbe\xd8\xf8\xac\x4b\xbe\x15\x0d\x5c\xf5\xae\xe0\x32\x11\x98\xb7\xc5\xc5\xaa\xac\x71\xd0\x25\xef\xd0\x76\xfa\xf5\x40\x6b\x98\xff\x55\xb5\xfc\xc1\x68\x32\x55\xeb\x7e\x89\x39\x68\x95\x7a\xcd\x73\xc7\x57\xcd\x71\x47\xe1\xec\xca\x7b\x5a\x84\xb4\x84\x4c\x9f\xb7\x19\x1f\x4e\x42\x61\xe4\x8a\x35\xa8\x7e\x1e\x35\x55\xfa\x65\x76\xe9\xc5\x3c\x71\x5e\xdb\x57\xab\xf3\x3c\xde\x84\x7d\xd3\x3c\x06\x46\x9b\x10\xff\x7b\xe1\x6a\x1b\x3c\x5d\x6f\x3f\x06\x65\x5b\xba\xff\xbb\xa5\xc7\x46\xae\x47\xea\x42\xc4\x94\x99\x5c\x71\x15\xa8\x9e\xef\x3a\x56\xdf\xa2\x2c\xdd\x84\xd7\x83\x5b\x0d\xfb\xd3\xbb\xe7\xde\x29\xef\x41\xfa\x86\x48\x49\x27\xbc\xb9\xba\x7e\xee\x59\x16\x93\x84\xa3\xb9\x3b\x37\xe0\x96\x10\x32\xe4\x4d\xfd\x2e\x4b\xa3\x25\x72\xd8\xe4\x13\xd5\xbf\x46\xc0\x06\x46\x51\x0b\x51\x26\xe2\x41\x90\xcf\x21\xf5\xcb\x20\xd8\x94\x2f\x6d\x18\xfd\x29\x64\x97\x50\x55\xeb\x18\x1c\x7f\x05\x00\x00\xff\xff\x4b\x1b\x96\x78\x6b\x07\x00\x00"

func userSwap_with_pair_pathTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_pair_pathTemplate,
		"user/swap_with_pair_path.template",
	)
}

func userSwap_with_pair_pathTemplate() (*asset, error) {
	bytes, err := userSwap_with_pair_pathTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_pair_path.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x4, 0x52, 0x7a, 0xb6, 0x93, 0xf1, 0xc6, 0xe9, 0x55, 0xcc, 0x1c, 0x6e, 0x9c, 0xa6, 0x67, 0xfa, 0x21, 0x96, 0x13, 0xa0, 0x8c, 0x31, 0x5b, 0xc0, 0xff, 0x65, 0xc8, 0xea, 0xa, 0xab, 0xe2}}
	return a, nil
}

var _userSwap_with_pathsTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xdf\x6b\xdb\x30\x10\xc7\xdf\xfd\x57\x5c\xf3\x50\xec\x92\xda\x2b\x8c\x3d\x84\xa4\x90\x8d\x15\x4a\x61\x2b\xed\xb6\x97\x92\x87\x8b\x7c\x71\x44\x1d\xc9\xc8\xe7\x64\xa1\xe4\x7f\x1f\xb6\xac\x46\x9e\xdd\x0c\x06\xf5\xdb\x59\x9f\xbb\xef\xe9\x7e\x48\x6e\x0a\x6d\x18\x7e\xe8\x67\x52\x57\xdf\x70\x43\xb0\x32\x7a\xd3\xda\xf3\x34\x35\x41\xd0\x22\x37\x95\xca\xe4\x32\xa7\xe6\xc8\x52\xa3\x38\x4e\xe2\x38\x11\x5a\xb1\x41\xc1\x65\xc2\xf5\x59\x99\x74\xd0\x58\xa4\x62\xe4\x82\x3c\xee\xb0\xb8\x41\xc1\xda\xec\xdf\x08\xe1\x11\x3d\xcf\x5b\xc5\x64\x56\x28\xa8\x3c\xe1\x7c\x84\x7a\xfe\x5f\xb4\x5a\xc9\xec\x84\xaf\x05\x7a\x7e\x0f\xba\x62\x32\x27\xfc\x2c\x60\xfd\x82\x20\x48\x12\x48\xa9\xc8\xf5\x1e\x84\x4e\x09\x84\x2e\x24\xa5\xb0\xdc\x03\xb6\xff\x29\x05\x17\x20\x60\x83\xaa\x44\xc1\x52\xab\x30\x00\x00\x68\x8a\x78\xab\xe6\x1b\x5d\x29\x2e\x27\xf0\xf4\xf3\x46\xfe\xfe\xf4\x71\x31\x6e\x4e\x0b\xe4\x75\xfd\xf3\x91\x8d\x54\xd9\x62\x1c\xf8\x3e\xbf\xb0\xca\xf9\x1e\x79\x3d\x81\x47\xd6\x06\x33\xaa\x0d\x9f\xf9\x5e\xf1\x5b\x90\xcf\x3c\x90\x20\xb9\x25\x63\xb1\xfb\x6a\x99\x4b\xd1\xa7\x3e\x63\x8e\x4a\x50\x1f\x8a\xe0\xc5\x26\x6b\xa8\x40\x43\x61\x55\x92\x99\x0b\x51\x5f\x68\x02\xf3\x8a\xd7\xad\xe1\xb8\xfa\xcb\x89\xdd\x35\xee\x68\x0f\x33\x7b\xd3\xa7\x0f\x8b\x57\x22\xb9\x18\x82\x9b\xeb\xc0\xf4\x12\x3c\x91\x78\xa9\x8d\xd1\xbb\xe9\x79\x77\x12\x1b\xf4\x3a\xac\xfb\x38\xe9\x95\x2c\x3a\x8b\x77\x92\xd7\xa9\xc1\x5d\x88\x1b\x9b\x6a\xa7\x15\x51\xd0\x97\x77\xe5\xac\xf5\xbd\x41\x28\x77\x58\x84\xdb\xfa\xe0\x56\x4d\xea\x33\x5f\x6c\x6c\xad\x3b\xda\xdb\xc2\xf9\x56\xf4\x2a\x31\xa8\x65\x13\x81\x59\x57\x3c\x5e\xda\x3e\x04\x7d\xe7\x2d\x9a\x5e\x4f\x1f\x68\x05\xb3\xff\xaa\x96\x3f\x3c\xc7\x4c\xe5\x6a\x58\x62\x06\x4a\xe6\x5e\x83\x9b\x16\x26\xbe\x6e\x89\x5b\x0a\xa7\x97\xde\xeb\x13\x0b\x43\xc8\xf4\x75\x53\xf0\xbe\x91\x0a\xa3\xba\x5c\x27\xf5\xfb\x71\x73\xa9\x9e\xa7\xe7\x5e\xd4\xc6\xeb\xa5\x7b\x3d\x97\xeb\xe1\x3a\x1c\x9a\xfa\x31\x30\x9a\x8c\xf8\x3d\xa4\xdb\xbd\xf1\x94\xbd\x4d\x3a\x29\xdc\x51\x7e\xef\xc6\x1e\x8e\x72\x03\x52\x67\x71\x4a\x85\x2e\x25\xb7\x81\xdc\x94\xbb\x58\x43\xeb\xe2\x56\xdb\x1f\x79\x7f\xc3\xfd\x59\x1f\x20\x7d\x23\xce\x49\x65\xbc\xbe\xbc\x5a\x0c\xac\x8c\xce\xc2\xd1\xac\xfe\xae\xa1\x5e\xc5\xe6\x29\x71\xcf\xb7\xd0\x4a\x20\x87\xc7\x7c\x22\xf7\x6b\x04\xac\x61\x14\x75\x08\x9b\x88\x87\x20\xff\x8d\xb8\xf7\x21\x66\x6d\x1f\xe5\x30\xfa\x57\xc8\xbe\x83\x37\x53\x17\x49\x60\xab\x7f\xf8\x13\x00\x00\xff\xff\x4e\xd7\x11\x92\x9d\x07\x00\x00"

func userSwap_with_pathsTemplateBytes() ([]byte, error) {
	return bindataRead(
		_userSwap_with_pathsTemplate,
		"user/swap_with_paths.template",
	)
}

func userSwap_with_pathsTemplate() (*asset, error) {
	bytes, err := userSwap_with_pathsTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user/swap_with_paths.template", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x3a, 0xcb, 0x8e, 0x51, 0xb1, 0xfd, 0x95, 0xcd, 0xaf, 0xa5, 0x76, 0x12, 0x94, 0xee, 0x4f, 0xd9, 0xe0, 0xe, 0x3c, 0x96, 0x4f, 0xe9, 0x77, 0xeb, 0xea, 0x97, 0xb8, 0x70, 0x57, 0x0, 0x88}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"factory/create_pair.template":           factoryCreate_pairTemplate,
	"factory/deploy_pair_template.cdc":       factoryDeploy_pair_templateCdc,
	"test/mint_all_tokens.cdc":               testMint_all_tokensCdc,
	"user/add_liquidity.cdc":                 userAdd_liquidityCdc,
	"user/swapMultiTest.template":            userSwapmultitestTemplate,
	"user/swap_with_one_pair.template":       userSwap_with_one_pairTemplate,
	"user/swap_with_pair_path copy.template": userSwap_with_pair_pathCopyTemplate,
	"user/swap_with_pair_path.template":      userSwap_with_pair_pathTemplate,
	"user/swap_with_paths.template":          userSwap_with_pathsTemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"factory": {nil, map[string]*bintree{
		"create_pair.template": {factoryCreate_pairTemplate, map[string]*bintree{}},
		"deploy_pair_template.cdc": {factoryDeploy_pair_templateCdc, map[string]*bintree{}},
	}},
	"test": {nil, map[string]*bintree{
		"mint_all_tokens.cdc": {testMint_all_tokensCdc, map[string]*bintree{}},
	}},
	"user": {nil, map[string]*bintree{
		"add_liquidity.cdc": {userAdd_liquidityCdc, map[string]*bintree{}},
		"swapMultiTest.template": {userSwapmultitestTemplate, map[string]*bintree{}},
		"swap_with_one_pair.template": {userSwap_with_one_pairTemplate, map[string]*bintree{}},
		"swap_with_pair_path copy.template": {userSwap_with_pair_pathCopyTemplate, map[string]*bintree{}},
		"swap_with_pair_path.template": {userSwap_with_pair_pathTemplate, map[string]*bintree{}},
		"swap_with_paths.template": {userSwap_with_pathsTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
